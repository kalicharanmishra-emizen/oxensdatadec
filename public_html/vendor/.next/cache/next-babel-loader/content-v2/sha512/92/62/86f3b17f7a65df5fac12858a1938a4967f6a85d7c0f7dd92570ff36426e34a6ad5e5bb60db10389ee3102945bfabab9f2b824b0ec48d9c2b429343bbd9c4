{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Vendor from 'layouts/Vendor';\nimport UserHeader from 'components/Headers/UserHeader';\nimport { Button, Card, CardBody, CardHeader, Col, Container, Form, FormGroup, Row } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport InputCom from \"components/Form/InputCom\";\nimport FromSelect from \"components/Form/FromSelect\";\nimport StatusChnage from \"components/Form/StatusChnage\";\nimport { unSetApiSucc, unSetApiFail } from \"reducers/mainSlice\";\nimport { createCustome, getCustomeList } from \"reducers/menuSlice\";\nimport nProgress from \"nprogress\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nfunction Create() {\n  const router = useRouter();\n  const {\n    item,\n    customize\n  } = router.query;\n  const dispatch = useDispatch();\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(true);\n  const apiError = useSelector(state => state.mainSlice.failed);\n  const apiSuccess = useSelector(state => state.mainSlice.success);\n  const custome = useSelector(state => state.menuSlice.custome);\n  const {\n    0: customeList,\n    1: setcustomeList\n  } = useState(null);\n  let formSubmit = {\n    title: \"\",\n    status: true,\n    is_multiple: \"0\",\n    is_dependent: \"0\",\n    dependent_with: \"\",\n    max_multiple: \"\"\n  };\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required!'),\n    max_multiple: Yup.number().typeError('Max limit must be a valid number').positive().nullable(true).transform((_, val) => val === val ? val : null),\n    is_multiple: Yup.string().required('is_multiple is required!'),\n    is_multiple: Yup.string().required('is_multiple is required!'),\n    is_dependent: Yup.string().required('is_dependent is required!'),\n    dependent_with: Yup.string().when(\"is_dependent\", {\n      is: \"1\",\n      then: Yup.string().required(\"dependent_with is required!\")\n    })\n  });\n\n  const formSubmitHandal = async formData => {\n    let finalData = _objectSpread({}, formData);\n\n    finalData['dependent_with'] = finalData['dependent_with'] == 'empty' ? null : finalData['dependent_with'];\n    finalData['itemId'] = customize;\n    nProgress.start();\n    dispatch(createCustome(finalData));\n  };\n\n  useEffect(() => {\n    if (customize != undefined) {\n      if (custome.length == 0) {\n        dispatch(getCustomeList({\n          itemId: customize\n        }));\n      }\n\n      setLoader(false);\n    }\n  }, [customize]);\n  useEffect(() => {\n    let listData = [{\n      value: 'empty',\n      label: 'Select Dependent Item'\n    }];\n    custome.map(data => {\n      if (!data.is_multiple) {\n        listData.push({\n          value: data._id,\n          label: data.title\n        });\n      }\n    });\n    setcustomeList(listData);\n  }, [custome]);\n  useEffect(() => {\n    if (apiSuccess) {\n      if (apiSuccess.statusCode >= 200 && apiSuccess.statusCode < 300) {\n        toast(apiSuccess.message, {\n          type: 'success',\n          toastId: 12\n        });\n        dispatch(unSetApiSucc());\n        router.push(`/menu/${item}/${customize}`);\n        nProgress.done();\n      }\n    }\n\n    if (apiError) {\n      if (apiError.statusCode >= 400 && apiError.statusCode <= 500) {\n        toast(apiError.message, {\n          type: 'error',\n          toastId: 12\n        });\n        dispatch(unSetApiFail());\n        nProgress.done();\n      }\n    }\n  }, [apiSuccess, apiError]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(UserHeader, {}), /*#__PURE__*/_jsx(Container, {\n      className: \"mt--7\",\n      fluid: true,\n      children: /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsx(Col, {\n          className: \"order-xl-1\",\n          xl: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"bg-secondary shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-white border-0\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(Col, {\n                  xs: \"8\",\n                  children: /*#__PURE__*/_jsx(\"h3\", {\n                    className: \"mb-0\",\n                    children: \"Create Custome Item\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsx(Formik, {\n                initialValues: formSubmit,\n                validationSchema: validationSchema,\n                validateOnChange: false,\n                validateOnBlur: false,\n                onSubmit: values => formSubmitHandal(values),\n                children: formikProps => /*#__PURE__*/_jsx(Form, {\n                  onSubmit: formikProps.handleSubmit,\n                  children: /*#__PURE__*/_jsxs(\"div\", {\n                    className: \"pl-lg-4\",\n                    children: [/*#__PURE__*/_jsxs(Row, {\n                      className: \"align-items-center\",\n                      children: [/*#__PURE__*/_jsx(Col, {\n                        lg: \"12\",\n                        children: /*#__PURE__*/_jsxs(FormGroup, {\n                          children: [/*#__PURE__*/_jsx(\"label\", {\n                            className: \"form-control-label\",\n                            children: \"Title *\"\n                          }), /*#__PURE__*/_jsx(InputCom, {\n                            type: \"text\",\n                            name: \"title\",\n                            placeholder: \"Enter Title\",\n                            getValue: formikProps.setFieldValue,\n                            defValue: formikProps.values.title,\n                            error: formikProps.errors.title\n                          })]\n                        })\n                      }), /*#__PURE__*/_jsx(Col, {\n                        lg: \"6\",\n                        children: /*#__PURE__*/_jsxs(FormGroup, {\n                          children: [/*#__PURE__*/_jsx(\"label\", {\n                            className: \"form-control-label\",\n                            children: \"Is Multiple\"\n                          }), !loader ? /*#__PURE__*/_jsx(FromSelect, {\n                            name: \"is_multiple\",\n                            id: \"is_multiple\",\n                            options: [{\n                              value: \"0\",\n                              label: \"No\"\n                            }, {\n                              value: \"1\",\n                              label: \"Yes\"\n                            }],\n                            isDefault: false,\n                            isMulti: false,\n                            defValue: formikProps.values.is_multiple,\n                            getValue: formikProps.setFieldValue,\n                            error: formikProps.errors.is_multiple // submitValidate={submitValidate}\n\n                          }) : \"\"]\n                        })\n                      }), /*#__PURE__*/_jsx(Col, {\n                        lg: \"6\",\n                        children: /*#__PURE__*/_jsxs(FormGroup, {\n                          children: [/*#__PURE__*/_jsx(\"label\", {\n                            className: \"form-control-label\",\n                            children: \"Max Limit Multiple\"\n                          }), !loader ? /*#__PURE__*/_jsx(InputCom, {\n                            type: \"text\",\n                            name: \"max_multiple\",\n                            placeholder: \"Enter max limit of multiselect\",\n                            isDefault: formikProps.values.is_multiple == '1' ? false : true,\n                            getValue: formikProps.setFieldValue,\n                            defValue: formikProps.values.max_multiple,\n                            error: formikProps.errors.max_multiple\n                          }) : \"\"]\n                        })\n                      }), /*#__PURE__*/_jsx(Col, {\n                        lg: \"6\",\n                        children: /*#__PURE__*/_jsxs(FormGroup, {\n                          children: [/*#__PURE__*/_jsx(\"label\", {\n                            className: \"form-control-label\",\n                            children: \"Is Dependent\"\n                          }), !loader ? /*#__PURE__*/_jsx(FromSelect, {\n                            name: \"is_dependent\",\n                            id: \"is_dependent\",\n                            options: [{\n                              value: \"0\",\n                              label: \"No\"\n                            }, {\n                              value: \"1\",\n                              label: \"Yes\"\n                            }],\n                            isDefault: false,\n                            isMulti: false,\n                            defValue: formikProps.values.is_dependent,\n                            getValue: formikProps.setFieldValue,\n                            error: formikProps.errors.is_dependent\n                          }) : \"\"]\n                        })\n                      }), /*#__PURE__*/_jsx(Col, {\n                        lg: \"6\",\n                        children: /*#__PURE__*/_jsxs(FormGroup, {\n                          children: [/*#__PURE__*/_jsx(\"label\", {\n                            className: \"form-control-label\",\n                            children: \"Dependent With\"\n                          }), !loader ? formikProps.values.is_dependent == '1' ? /*#__PURE__*/_jsx(FromSelect, {\n                            name: \"dependent_with\",\n                            id: \"dependent_with\",\n                            options: customeList ? customeList : [{\n                              value: 'empty',\n                              label: \"Select Customization\"\n                            }],\n                            isDefault: false,\n                            isMulti: false,\n                            defValue: formikProps.values.dependent_with,\n                            getValue: formikProps.setFieldValue,\n                            error: formikProps.errors.dependent_with\n                          }) : /*#__PURE__*/_jsx(FromSelect, {\n                            name: \"dependent_with\",\n                            id: \"dependent_with\",\n                            options: [{\n                              value: 'empty',\n                              label: \"Select Customization\"\n                            }],\n                            isDefault: true,\n                            isMulti: false,\n                            defValue: formikProps.values.dependent_with,\n                            getValue: formikProps.setFieldValue,\n                            error: formikProps.errors.dependent_with\n                          }) : \"\"]\n                        })\n                      }), /*#__PURE__*/_jsx(Col, {\n                        lg: \"6\",\n                        children: /*#__PURE__*/_jsxs(FormGroup, {\n                          inline: true,\n                          children: [/*#__PURE__*/_jsx(\"label\", {\n                            className: \"form-control-label d-block w-100\",\n                            children: \"Status\"\n                          }), /*#__PURE__*/_jsx(StatusChnage, {\n                            defValue: formikProps.values.status,\n                            getValue: formikProps.setFieldValue,\n                            error: formikProps.errors.status\n                          })]\n                        })\n                      })]\n                    }), /*#__PURE__*/_jsx(Row, {\n                      children: /*#__PURE__*/_jsxs(Col, {\n                        lg: \"12\",\n                        children: [/*#__PURE__*/_jsx(Button, {\n                          className: \"float-right\",\n                          color: \"primary\",\n                          type: \"submit\",\n                          children: \"Save\"\n                        }), /*#__PURE__*/_jsx(Button, {\n                          className: \"float-right mr-2\",\n                          color: \"secondary\",\n                          type: \"button\",\n                          onClick: e => {\n                            e.preventDefault();\n                            router.back();\n                          },\n                          children: \"Back\"\n                        })]\n                      })\n                    })]\n                  })\n                })\n              })\n            })]\n          })\n        })\n      })\n    })]\n  });\n}\n\nCreate.layout = Vendor;\nexport default Create;","map":null,"metadata":{},"sourceType":"module"}