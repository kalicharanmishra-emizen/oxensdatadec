{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport { FormFeedback, Input } from \"reactstrap\";\nexport default function FormInputCom(props) {\n  const {\n    0: formData,\n    1: setFormData\n  } = useState('');\n  const {\n    0: validation,\n    1: setValidation\n  } = useState(''); // const [submitValidate, setsubmitValidate] = useState(false)\n\n  let isDefault = false;\n\n  if ('isDefault' in props) {\n    isDefault = props.isDefault;\n  }\n\n  useEffect(() => {\n    setFormData(props.defValue);\n\n    if (props.defValue != '') {\n      validateData(props.defValue); // setValidation(null)\n    }\n  }, [props.defValue]);\n\n  const validateData = async value => {\n    if (props.validator.length == 0) {\n      setValidation(null);\n    } else {\n      props.validator.some(data => {\n        let option = [];\n\n        if ('valOption' in data) {\n          option = data.valOption;\n        }\n\n        if ('isOptional' in data) {\n          if (data.isNot) {\n            if (value != '' && value != null && !data.property(value, option)) {\n              setValidation(data.message);\n              return true;\n            } else {\n              setValidation(null);\n            }\n          } else {\n            if (value != '' && value != null && data.property(value, option)) {\n              setValidation(data.message);\n              return true;\n            } else {\n              setValidation(null);\n            }\n          }\n        } else {\n          if (data.isNot) {\n            if (!data.property(value, option)) {\n              setValidation(data.message);\n              return true;\n            } else {\n              setValidation(null);\n            }\n          } else {\n            if (data.property(value, option)) {\n              setValidation(data.message);\n              return true;\n            } else {\n              setValidation(null);\n            }\n          }\n        }\n      });\n    }\n  };\n\n  const handleChange = async e => {\n    setFormData(e.target.value);\n    await validateData(e.target.value);\n  };\n\n  useEffect(() => {\n    if (validation !== '') {\n      let rowReturnData = {\n        key: props.name,\n        error: validation,\n        data: formData\n      };\n      props.getValue(rowReturnData);\n    }\n  }, [validation, formData]);\n  useEffect(() => {\n    if (props.submitValidate) {\n      validateData(formData);\n    }\n  }, [props.submitValidate]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Input, {\n      className: \"form-control-alternative\",\n      type: props.type,\n      name: props.name,\n      placeholder: props.placeholder,\n      value: formData,\n      disabled: isDefault,\n      onChange: handleChange,\n      invalid: validation ? true : false\n    }), /*#__PURE__*/_jsx(FormFeedback, {\n      children: validation\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}