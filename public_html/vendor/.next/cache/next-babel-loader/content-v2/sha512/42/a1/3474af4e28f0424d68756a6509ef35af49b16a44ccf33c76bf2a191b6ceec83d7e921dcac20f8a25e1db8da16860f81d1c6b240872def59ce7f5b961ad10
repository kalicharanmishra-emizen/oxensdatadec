{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { callApi } from '../Helper/helper';\nimport { apiFail, apiSuccess } from 'reducers/mainSlice';\nconst orderSlice = createSlice({\n  name: \"Order\",\n  initialState: {\n    list: {\n      isLoading: true,\n      data: []\n    },\n    activeOrder: {\n      idLoading: true,\n      data: []\n    },\n    detail: null\n  },\n  reducers: {\n    listing: (state, action) => {\n      state.list = {\n        isLoading: false,\n        data: action.payload.data\n      };\n    },\n    setDetail: (state, action) => {\n      state.detail = action.payload.data;\n    },\n    unSetDetail: (state, action) => {\n      state.detail = null;\n    },\n    activeListing: (state, action) => {\n      state.activeOrder = {\n        isLoading: false,\n        data: action.payload.data\n      };\n    }\n  }\n});\nexport default orderSlice.reducer;\nconst {\n  listing,\n  setDetail,\n  unSetDetail,\n  activeListing\n} = orderSlice.actions;\nexport const getOrderList = page => async dispatch => {\n  try {\n    const res = await callApi('post', `/order/list?page=${page}`, {});\n    dispatch(listing(res.data));\n    dispatch(unSetDetail());\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const getOrderDetail = value => async dispatch => {\n  try {\n    const res = await callApi('post', '/order/detail', value);\n    dispatch(setDetail(res.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const getActiveOrder = () => async dispatch => {\n  try {\n    let res = await callApi('post', '/order/activeOrder', {});\n    dispatch(activeListing(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}