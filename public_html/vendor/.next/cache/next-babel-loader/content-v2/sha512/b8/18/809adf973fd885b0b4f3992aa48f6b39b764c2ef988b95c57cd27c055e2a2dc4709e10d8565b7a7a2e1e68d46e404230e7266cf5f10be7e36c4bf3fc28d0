{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { logout } from 'reducers/authSlice';\nimport { callApi } from \"../Helper/helper\";\nconst mainSlice = createSlice({\n  name: 'mainSlice',\n  initialState: {\n    charge: {},\n    success: null,\n    failed: null,\n    cart: {\n      orderItems: {},\n      storeId: null,\n      orderType: 0,\n      totalQuantity: 0,\n      totalAmount: 0.00\n    },\n    placeOrderData: {},\n    POSuser: []\n  },\n  reducers: {\n    apiFailed: (state, action) => {\n      console.log('error value', action.payload);\n      state.failed = action.payload;\n    },\n    unsetApiFailed: (state, action) => {\n      state.failed = null;\n    },\n    apiSucceed: (state, action) => {\n      state.success = action.payload;\n    },\n    unsetApiSucceed: (state, action) => {\n      state.success = null;\n    },\n    setCart: (state, action) => {\n      if (action.payload) {\n        state.cart = action.payload;\n      } else {\n        state.cart = {\n          orderItems: {},\n          storeId: null,\n          orderType: 0,\n          totalQuantity: 0,\n          totalAmount: 0.00\n        };\n      }\n    },\n    setCharge: (state, action) => {\n      state.charge = action.payload.data;\n    },\n    getPlaceOeder: (state, action) => {\n      state.placeOrderData = action.payload.data;\n    },\n    getPOSuser: (state, action) => {\n      state.POSuser = action.payload.data;\n    }\n  }\n});\nconst {\n  apiFailed,\n  unsetApiFailed,\n  apiSucceed,\n  unsetApiSucceed,\n  setCart,\n  setCharge,\n  getPlaceOeder,\n  getPOSuser\n} = mainSlice.actions;\nexport default mainSlice.reducer;\nexport const apiSuccess = value => async dispatch => {\n  dispatch(apiSucceed(value));\n};\nexport const apiFail = value => async dispatch => {\n  if (value.statusCode == 419) {\n    dispatch(logout());\n  } else {\n    dispatch(apiFailed(value));\n  }\n};\nexport const unSetApiFail = () => async dispatch => {\n  dispatch(unsetApiFailed());\n};\nexport const unSetApiSucc = () => async dispatch => {\n  dispatch(unsetApiSucceed());\n};\nexport const manageCartData = () => async dispatch => {\n  dispatch(setCart(JSON.parse(localStorage.getItem('cart'))));\n};\nexport const getAllOrderCharge = () => async dispatch => {\n  try {\n    let res = await callApi('post', '/store/orderAllCharge', {});\n    dispatch(setCharge(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};\nexport const placeOrder = value => async dispatch => {\n  try {\n    let res = await callApi('post', '/store/placeorder', value);\n    dispatch(getPlaceOeder(res.data));\n    dispatch(apiSuccess(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};\nexport const getPOSusers = value => async dispatch => {\n  try {\n    console.log(\"value\", value);\n    let res = await callApi('post', '/store/posuser', value);\n    console.log(\"resss ===============\", res.data);\n    dispatch(getPOSuser(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}