{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vendor from 'layouts/Vendor';\nimport { useEffect, useState } from \"react\";\nimport UserHeader from 'components/Headers/UserHeader';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Card, CardBody, Input, CardHeader, Col, Container, Row, Button } from \"reactstrap\";\nimport { unSetApiSucc, unSetApiFail } from \"reducers/mainSlice\";\nimport nProgress from \"nprogress\";\nimport DetailsSidebar from '../../components/posts/details-sidebar';\nimport { getStoreDetail, setFilterStoreItems } from '../../reducers/storeSlice';\nimport \"../../styles/store-detail.css\";\nimport { badgesColor, badgesText } from '../../Helper/helper';\nimport { getAllOrderCharge, manageCartData, placeOrder } from '../../reducers/mainSlice';\nimport QuantityBtn from '../../components/quantityBtn';\nimport Cart from '../../components/Model/Cart';\nimport RemoveItem from '../../components/Model/RemoveItem';\nimport PosUserComponent from \"../../components/searchPOSuser/posUserComponent\";\n\nconst index = () => {\n  var _storeDetail$data5, _storeDetail$data6, _storeDetail$data7;\n\n  const dispatch = useDispatch();\n  const storeItems = useSelector(state => state.storeSlice.storeItems);\n  const storeDetail = useSelector(state => state.storeSlice.storeDetail);\n  const cart = useSelector(state => state.mainSlice.cart);\n  const allCharges = useSelector(state => state.mainSlice.charge);\n  const apiFail = useSelector(state => state.mainSlice.failed);\n  const apiSuccess = useSelector(state => state.mainSlice.success);\n  const {\n    0: transectionIdPOS,\n    1: setTransectionIdPOS\n  } = useState(\"\");\n  const {\n    0: transectionIdError,\n    1: setTransectionIdError\n  } = useState(false);\n  const {\n    0: isReset,\n    1: setIsReset\n  } = useState(false);\n  const {\n    0: selectUser,\n    1: setSelectUser\n  } = useState(null);\n  const {\n    0: tip,\n    1: setTip\n  } = useState(0);\n  const {\n    0: itemId,\n    1: setItemId\n  } = useState(null);\n  const {\n    0: cartItem,\n    1: setCartItem\n  } = useState(null);\n  const {\n    0: cartModal,\n    1: setCartModal\n  } = useState(false);\n  const {\n    0: selectedCat,\n    1: setSelectedCat\n  } = useState(null);\n  const {\n    0: cartRemoveModal,\n    1: setCartRemoveModal\n  } = useState(false);\n  const {\n    0: selectedCatTitle,\n    1: setSelectedCatTitle\n  } = useState('');\n  const {\n    0: paymentMode,\n    1: setPaymentMode\n  } = useState(0); // 0 => COD, 1 => wallet, 2 => other\n\n  const {\n    0: bannerImage,\n    1: setBannerImage\n  } = useState({\n    main: [process.env.BASE_URL + '/images/placeholder-banner.png'],\n    other: []\n  });\n  const {\n    0: storeTiming,\n    1: setStoreTiming\n  } = useState({\n    open: '0.00',\n    close: '0.00'\n  });\n  const {\n    0: charge,\n    1: setCharge\n  } = useState({\n    subTotal: 0.00,\n    discount: 0.00,\n    taxCharge: 0.00,\n    grandTotal: 0.00\n  }); // start cart function =========\n\n  const addItemToCart = item => {\n    var _storeDetail$data;\n\n    let cart = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : {\n      orderItems: {},\n      storeId: storeDetail === null || storeDetail === void 0 ? void 0 : (_storeDetail$data = storeDetail.data) === null || _storeDetail$data === void 0 ? void 0 : _storeDetail$data._id,\n      totalQuantity: 0,\n      totalAmount: 0.00\n    };\n    let itemPrice = Number(item.price);\n    let latestGroup = cart.orderItems[item._id] ? cart.orderItems[item._id].latestGroup : [];\n    let selectedGroup = cart.orderItems[item._id] ? cart.orderItems[item._id].selectedGroup : {};\n    /* Find and create a selected group start */\n\n    let selectedGroupRaw = [];\n    let groupKey = item._id;\n    selectedGroup[groupKey] = {\n      group: selectedGroupRaw,\n      quantity: selectedGroup[groupKey] ? selectedGroup[groupKey].quantity + 1 : 1,\n      price: selectedGroup[groupKey] ? selectedGroup[groupKey].price + itemPrice : itemPrice\n    };\n    latestGroup = selectedGroupRaw;\n    /* Find and create a selected group end */\n\n    /* set cart data to a spacific format start*/\n\n    cart.orderItems[item._id] = {\n      menuitem: item,\n      selectedGroup: selectedGroup,\n      latestGroup: latestGroup,\n      itemQuantity: cart.orderItems[item._id] ? cart.orderItems[item._id].itemQuantity + 1 : 1,\n      itemPrice: cart.orderItems[item._id] ? cart.orderItems[item._id].itemPrice + itemPrice : itemPrice\n    };\n\n    if (!cart.storeId) {\n      var _storeDetail$data2;\n\n      cart.storeId = storeDetail === null || storeDetail === void 0 ? void 0 : (_storeDetail$data2 = storeDetail.data) === null || _storeDetail$data2 === void 0 ? void 0 : _storeDetail$data2._id;\n    }\n\n    cart.totalQuantity += 1;\n    cart.totalAmount += itemPrice;\n    localStorage.setItem('cart', JSON.stringify(cart));\n    dispatch(manageCartData());\n    /* set cart data to a spacific format end*/\n  };\n\n  const cartToggle = e => {\n    let selectItem = null;\n\n    if (e !== undefined) {\n      let item = e.currentTarget.getAttribute('item');\n      selectItem = storeItems.doc.find(data => data._id == item);\n    }\n\n    if (selectItem != undefined) {\n      var _cart$storeDetail, _cart$storeDetail$dat, _cart$storeDetail2, _cart$storeDetail2$da;\n\n      if ((_cart$storeDetail = cart.storeDetail) !== null && _cart$storeDetail !== void 0 && (_cart$storeDetail$dat = _cart$storeDetail.data) !== null && _cart$storeDetail$dat !== void 0 && _cart$storeDetail$dat._id && storeId != ((_cart$storeDetail2 = cart.storeDetail) === null || _cart$storeDetail2 === void 0 ? void 0 : (_cart$storeDetail2$da = _cart$storeDetail2.data) === null || _cart$storeDetail2$da === void 0 ? void 0 : _cart$storeDetail2$da._id)) {\n        Swal.fire({\n          icon: 'info',\n          html: `Your cart has existing items from other store. Do you want to clear it and add items from ${storeDetail.data ? storeDetail.data.title : ''}?`,\n          showCancelButton: true,\n          confirmButtonText: 'Yes',\n          scrollbarPadding: false,\n          closeOnConfirm: true,\n          customClass: {\n            actions: 'cartConfirmAction',\n            confirmButton: 'ageInfoBtn',\n            cancelButton: 'ageInfoBtn',\n            htmlContainer: 'ageInfoHtmlContainer',\n            title: \"cartConfirnHeader\"\n          }\n        }).then(result => {\n          if (result.isConfirmed) {\n            localStorage.removeItem('cart');\n            dispatch(manageCartData());\n\n            if (selectItem.age_res) {\n              Swal.fire({\n                icon: 'info',\n                html: `You mush be of 18+ age for ordering this product.<br>Are you 18 or above?`,\n                showCancelButton: true,\n                confirmButtonText: 'Yes',\n                scrollbarPadding: false,\n                closeOnConfirm: true,\n                customClass: {\n                  actions: 'cartConfirmAction',\n                  confirmButton: 'ageInfoBtn',\n                  cancelButton: 'ageInfoBtn',\n                  htmlContainer: 'ageInfoHtmlContainer',\n                  title: \"cartConfirnHeader\"\n                }\n              }).then(result => {\n                if (result.isConfirmed) {\n                  if (selectItem.is_customize) {\n                    setCartItem(selectItem);\n                    setCartModal(!cartModal);\n                  } else {\n                    addItemToCart(selectItem);\n                  }\n                }\n              });\n            } else {\n              if (selectItem.is_customize) {\n                setCartItem(selectItem);\n                setCartModal(!cartModal);\n              } else {\n                addItemToCart(selectItem);\n              }\n            }\n          }\n        });\n      } else {\n        if (selectItem.age_res) {\n          Swal.fire({\n            icon: 'info',\n            html: `You mush be of 18+ age for ordering this product.<br>Are you 18 or above?`,\n            showCancelButton: true,\n            confirmButtonText: 'Yes',\n            scrollbarPadding: false,\n            closeOnConfirm: true,\n            customClass: {\n              actions: 'cartConfirmAction',\n              confirmButton: 'ageInfoBtn',\n              cancelButton: 'ageInfoBtn',\n              htmlContainer: 'ageInfoHtmlContainer',\n              title: \"cartConfirnHeader\"\n            }\n          }).then(result => {\n            if (result.isConfirmed) {\n              if (selectItem.is_customize) {\n                setCartItem(selectItem);\n                setCartModal(!cartModal);\n              } else {\n                addItemToCart(selectItem);\n              }\n            }\n          });\n        } else {\n          if (selectItem.is_customize) {\n            setCartItem(selectItem);\n            setCartModal(!cartModal);\n          } else {\n            addItemToCart(selectItem);\n          }\n        }\n      }\n    } else {\n      setCartItem(null);\n      setCartModal(!cartModal);\n    }\n  };\n\n  const cartRemoveToggle = () => {\n    setItemId(null);\n    setCartRemoveModal(!cartRemoveModal);\n  };\n\n  const getSelectedCat = value => {\n    let tempCat = storeDetail.data.filter.find(list => list._id == value); // Nprogress.start()\n\n    dispatch(setFilterStoreItems({\n      catId: value\n    }));\n    setSelectedCat(tempCat._id);\n    setSelectedCatTitle(tempCat.title);\n    console.log(\"template\", tempCat);\n  };\n\n  const getQuantity = data => {\n    if (data.newPopUp) {\n      let selectItem = storeItems.doc.find(list => list._id == data.itemId);\n      setCartItem(selectItem != undefined ? selectItem : null);\n      setCartModal(!cartModal);\n    } else if (data.removePopUp) {\n      setItemId(data.itemId);\n      setCartRemoveModal(!cartRemoveModal);\n    }\n  };\n\n  const calculateDefaultPrice = data => {\n    let price = Number(data.price);\n    /* get and calulate none dependent price start */\n\n    let noneDepCus = data.customize.filter(temp => !temp.is_dependent);\n    noneDepCus.map(tempCus => {\n      tempCus.variants.map(tempVar => {\n        if (tempVar.isDefault) {\n          price += Number(tempVar.price);\n        }\n      });\n    });\n    /* get and calulate none dependent price end */\n\n    /* get and calulate dependent price start */\n\n    let depCus = data.customize.filter(temp => temp.is_dependent);\n    depCus.map(tempCus => {\n      let dependentCustome = data.customize.find(dataCus => dataCus._id == tempCus.dependent_with);\n      let defaultSelectedVarID = dependentCustome.variants.find(defVar => defVar.isDefault == true);\n\n      if (defaultSelectedVarID != undefined) {\n        tempCus.variants.map(tempVar => {\n          if (tempVar.isDefault) {\n            let temPrice = tempVar.dependent_price.find(temp => temp.varientId == defaultSelectedVarID._id);\n\n            if (temPrice != undefined) {\n              price += Number(temPrice.price);\n            }\n          }\n        });\n      }\n    });\n    /* get and calulate dependent price end */\n\n    return price;\n  }; // end cart function =========\n  // add to cart start **************\n\n\n  const getCustomeTypeToString = data => {\n    console.log(\"data\", data);\n    let returnString = '';\n    data.map(cus => {\n      returnString += cus.title + '|';\n      cus.variants.map(vare => {\n        returnString += vare.title + ',';\n      });\n    });\n    return returnString;\n  }; // add to cart end **************\n  // all charges or calculation start ============= \n\n\n  const tipChange = e => {\n    if (e.target.value.match(/^[0-9]*$/) && e.target.value != '') {\n      setTip(e.target.value);\n    } else {\n      setTip(0);\n    }\n  };\n\n  const submitOrder = async () => {\n    if (true) {\n      var _storeDetail$data3, _storeDetail$data4;\n\n      // nProgress.start()\n      let orderProduct = [];\n      Object.keys(cart.orderItems).map(list => {\n        Object.keys(cart.orderItems[list]['selectedGroup']).map(group => {\n          /* manage customize's and varient's */\n          let customize = [];\n          cart.orderItems[list]['selectedGroup'][group]['group'].map(cus => {\n            /* set Customize varients */\n            let customizeVarient = [];\n            cus.variants.map(ver => {\n              customizeVarient.push({\n                id: ver._id,\n                title: ver.title\n              });\n            });\n            customize.push({\n              id: cus._id,\n              title: cus.title,\n              variants: customizeVarient\n            });\n          });\n          orderProduct.push({\n            id: cart.orderItems[list].menuitem._id,\n            title: cart.orderItems[list].menuitem.title,\n            age_res: cart.orderItems[list].menuitem.age_res,\n            customize: customize,\n            quantity: cart.orderItems[list]['selectedGroup'][group].quantity,\n            price: cart.orderItems[list]['selectedGroup'][group].price\n          });\n        });\n      });\n      let finalOrderSumery = {\n        userId: selectUser === null || selectUser === void 0 ? void 0 : selectUser.key,\n        storeId: storeDetail ? storeDetail === null || storeDetail === void 0 ? void 0 : (_storeDetail$data3 = storeDetail.data) === null || _storeDetail$data3 === void 0 ? void 0 : _storeDetail$data3._id : \"\",\n        paymentMode: paymentMode ? paymentMode : 0,\n        deliveryAddress: storeDetail ? storeDetail === null || storeDetail === void 0 ? void 0 : (_storeDetail$data4 = storeDetail.data) === null || _storeDetail$data4 === void 0 ? void 0 : _storeDetail$data4.location : {},\n        pickupData: [],\n        type: 1,\n        orderType: 1,\n        totalQuantity: cart.totalQuantity,\n        totalMrp: cart.totalAmount,\n        servicePrice: 0.00,\n        discountPrice: charge.discount,\n        deliveryPrice: 0.00,\n        totalPrice: charge.grandTotal - tip,\n        taxCharge: charge.taxCharge,\n        tip: tip ? tip : 0,\n        comment: \"\",\n        product: orderProduct,\n        paymentStatus: 1,\n        status: 1,\n        transectionIdPOS: transectionIdPOS\n      };\n      setIsReset(true);\n      setTransectionIdPOS(\"\");\n      setPaymentMode(0);\n      dispatch(placeOrder(finalOrderSumery));\n      console.log(\"finalOrderSumery obj\", finalOrderSumery);\n    }\n  };\n\n  const calculateCharges = () => {\n    let tempTaxCharge = 0.00;\n    let tempServiceCharge = 0.00;\n    let tempDiscountCharge = 0.00;\n\n    if (Object.keys(cart.orderItems).length == 0 && localStorage.getItem('cart') && Object.keys(JSON.parse(localStorage.getItem('cart')).orderItems).length != 0) {\n      dispatch(manageCartData());\n    }\n\n    if (cart.storeId && storeDetail.isLoading) {\n      dispatch(getStoreDetail({\n        storeId: cart.storeId\n      }));\n    }\n\n    if (Object.keys(charge).length != 0) {\n      // celculate service charge\n      tempServiceCharge = cart.totalAmount * allCharges.serviceFee / 100;\n\n      if (tempServiceCharge > allCharges.maxServiceFee) {\n        tempServiceCharge = allCharges.maxServiceFee;\n      } // calculate tax\n      // if (allCharges.taxPay != 0) {\n      //   tempTaxCharge = (cart.totalAmount * allCharges.taxPay)/100\n      // }\n      // calculate discount price\n\n\n      if (!storeDetail.isLoading && Object.keys(storeDetail.data.discount).length != 0 && (storeDetail.data.discount.discountType == 0 && storeDetail.data.discount.discountValue > 0 || storeDetail.data.discount.discountType == 1 && storeDetail.data.discount.maxDiscount > 0)) {\n        tempDiscountCharge = storeDetail.data.discount.maxDiscount;\n\n        if (storeDetail.data.discount.discountType == 0) {\n          tempDiscountCharge = cart.totalAmount * storeDetail.data.discount.discountValue / 100;\n\n          if (storeDetail.data.discount.maxDiscount > 0 && tempDiscountCharge > storeDetail.data.discount.maxDiscount) {\n            tempDiscountCharge = storeDetail.data.discount.maxDiscount;\n          }\n        }\n      }\n    }\n\n    setCharge({\n      grandTotal: Number((cart.totalAmount + Number(tip) + tempTaxCharge - tempDiscountCharge).toFixed(2)),\n      //remove tex charges after number(tip)  + tempTaxCharge\n      discount: Number(tempDiscountCharge.toFixed(2)),\n      // serviceCharge:tempServiceCharge.toFixed(2),\n      taxCharge: Number(tempTaxCharge.toFixed(2)),\n      subTotal: Number(cart.totalAmount.toFixed(2))\n    });\n  };\n\n  const clearCartData = e => {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't to Delete this order!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(result => {\n      if (result.isConfirmed) {\n        let cart = {\n          orderItems: {},\n          orderType: 0,\n          storeId: null,\n          totalQuantity: 0,\n          totalAmount: 0.00\n        };\n        localStorage.setItem('cart', JSON.stringify(cart));\n        dispatch(manageCartData());\n        setTransectionIdPOS(\"\");\n        setPaymentMode(0);\n        setIsReset(true);\n      }\n    });\n  };\n\n  const confirmOrder = () => {\n    if (selectUser === null) {\n      Swal.fire('Please select user');\n    } else if ((paymentMode === 1 || paymentMode === 2) && !transectionIdPOS) {\n      setTransectionIdError(true);\n    } else {\n      Swal.fire({\n        title: 'Are you sure?',\n        text: \"You won't to complete this Order!\",\n        icon: 'info',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, confirmed Order!'\n      }).then(result => {\n        if (result.isConfirmed) {\n          Swal.fire('Submit!', 'Your Order has been submited.', 'success').then(result => {\n            if (result) {\n              submitOrder();\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const handelPOSUser = data => {\n    setSelectUser(data);\n  };\n\n  const handelisReset = data => {\n    setIsReset(false);\n  }; // all charges or calculation end ============= \n  //  effects start *****************\n\n\n  useEffect(() => {\n    dispatch(getAllOrderCharge());\n    dispatch(getStoreDetail());\n  }, []); // add to cart effect \n\n  useEffect(() => {\n    if (!storeDetail.isLoading && storeDetail.data) {\n      /* set banner image start */\n      let mainImg = storeDetail.data.store_image.find(data => {\n        return data._id == 'main';\n      });\n\n      if (mainImg !== undefined) {\n        bannerImage.main = mainImg.image;\n      }\n\n      let otherImage = storeDetail.data.store_image.find(data => {\n        return data._id == 'other';\n      });\n\n      if (otherImage !== undefined) {\n        bannerImage.other = otherImage.image;\n      }\n\n      setBannerImage(_objectSpread({}, bannerImage));\n      /* set banner image end */\n\n      /* set timing start */\n\n      if (storeDetail.data.timing && 'time_data' in storeDetail.data.timing) {\n        storeTiming.open = storeDetail.data.timing.time_data.open != '' ? storeDetail.data.timing.time_data.open : '0.00';\n        storeTiming.close = storeDetail.data.timing.time_data.close != '' ? storeDetail.data.timing.time_data.close : '0.00';\n        setStoreTiming(_objectSpread({}, storeTiming));\n      }\n      /* set timing end */\n\n\n      nProgress.done();\n    }\n  }, [storeDetail]); // selected product price calulation\n\n  useEffect(() => {\n    calculateCharges();\n  }, [tip, cart, storeItems]); // after submit order clear page \n\n  useEffect(() => {\n    if (apiFail) {\n      if (apiFail.statusCode >= 400 && apiFail.statusCode <= 500) {\n        nProgress.done();\n        dispatch(unSetApiFail());\n        alert(apiFail.message);\n      }\n    }\n\n    if (apiSuccess) {\n      if (apiSuccess.statusCode >= 200 && apiSuccess.statusCode <= 300) {\n        nProgress.done();\n        dispatch(unSetApiSucc());\n        let cart = {\n          orderItems: {},\n          orderType: 0,\n          storeId: null,\n          totalQuantity: 0,\n          totalAmount: 0.00\n        };\n        localStorage.setItem('cart', JSON.stringify(cart));\n        dispatch(manageCartData());\n      }\n    }\n  }, [apiFail, apiSuccess]); //  effects end *****************\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(UserHeader, {}), /*#__PURE__*/_jsx(Container, {\n      className: \"mt--7\",\n      fluid: true,\n      children: /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsx(Col, {\n          className: \"order-xl-1\",\n          xl: \"12\",\n          lg: \"12\",\n          sm: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"bg-secondary shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-white border-0\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(Col, {\n                  xs: \"8\",\n                  children: /*#__PURE__*/_jsx(\"h3\", {\n                    className: \"mb-0\",\n                    children: \"POS\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              children: (storeDetail === null || storeDetail === void 0 ? void 0 : (_storeDetail$data5 = storeDetail.data) === null || _storeDetail$data5 === void 0 ? void 0 : _storeDetail$data5.assignPOS) === 1 ? /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(Row, {\n                  children: /*#__PURE__*/_jsxs(Col, {\n                    xl: \"12\",\n                    children: [/*#__PURE__*/_jsx(\"h4\", {\n                      children: \"Select Category\"\n                    }), /*#__PURE__*/_jsx(DetailsSidebar, {\n                      filter: storeDetail.data ? storeDetail.data.filter : [],\n                      getSelectedCat: getSelectedCat\n                    })]\n                  })\n                }), /*#__PURE__*/_jsxs(Row, {\n                  className: \"mt-5\",\n                  children: [/*#__PURE__*/_jsx(Col, {\n                    xl: \"8\",\n                    lg: \"12\",\n                    md: \"12\",\n                    sm: \"12\",\n                    className: \"mb-3\",\n                    children: /*#__PURE__*/_jsx(\"div\", {\n                      className: \"storeCards\",\n                      children: storeItems.doc.map(list => /*#__PURE__*/_jsxs(\"div\", {\n                        className: `itemStoreCard ${(list === null || list === void 0 ? void 0 : list.status) === false ? \"dissabledStoritem\" : \"\"}`,\n                        children: [/*#__PURE__*/_jsx(\"div\", {\n                          className: `imageBlock`,\n                          style: {\n                            backgroundImage: `url('${list.image}')`,\n                            width: \"100%\",\n                            height: \"118px\",\n                            backgroundRepeat: \"no-repeat\",\n                            backgroundSize: \"cover\"\n                          }\n                        }), /*#__PURE__*/_jsx(\"div\", {\n                          className: `itemInfo`\n                        }), /*#__PURE__*/_jsx(\"h6\", {\n                          style: {\n                            fontSize: \"14px\"\n                          },\n                          children: list.title\n                        }), /*#__PURE__*/_jsxs(\"span\", {\n                          className: `itemPrice`,\n                          children: [\"\\xA3\", list.is_customize ? calculateDefaultPrice(list) : list.price]\n                        }), /*#__PURE__*/_jsx(\"br\", {}), (list === null || list === void 0 ? void 0 : list.badge) != 0 ? /*#__PURE__*/_jsx(\"span\", {\n                          className: \"itemCardBadge\",\n                          style: {\n                            background: !(list !== null && list !== void 0 && list.status) ? \"rgb(191, 191, 191)\" : badgesColor(list.badge)\n                          },\n                          children: badgesText(list.badge)\n                        }) : \"\", /*#__PURE__*/_jsx(\"div\", {\n                          className: `addTocartBtnBlock`,\n                          children: list !== null && list !== void 0 && list.status ? cart && cart.orderItems[list._id] ? list.is_customize ? /*#__PURE__*/_jsx(QuantityBtn, {\n                            defvalue: cart.orderItems[list._id].itemQuantity,\n                            askCus: true,\n                            itemId: list._id,\n                            getQuantity: getQuantity\n                          }) : /*#__PURE__*/_jsx(QuantityBtn, {\n                            defvalue: cart.orderItems[list._id].itemQuantity,\n                            grpCus: true,\n                            groupId: list._id,\n                            itemId: list._id,\n                            getQuantity: () => {}\n                          }) : /*#__PURE__*/_jsx(\"span\", {\n                            role: \"button\",\n                            children: /*#__PURE__*/_jsx(\"a\", {\n                              onClick: cartToggle,\n                              item: list._id,\n                              children: \"Add\"\n                            })\n                          }) : \"\"\n                        })]\n                      }, list._id))\n                    })\n                  }), /*#__PURE__*/_jsxs(Col, {\n                    xl: \"4\",\n                    lg: \"12\",\n                    md: \"12\",\n                    sm: \"12\",\n                    className: \"leftcarCalculationtBox\",\n                    children: [/*#__PURE__*/_jsx(\"div\", {\n                      className: \"topUserManageBox\",\n                      children: /*#__PURE__*/_jsx(\"span\", {\n                        className: \"selectUserBtn\",\n                        children: /*#__PURE__*/_jsx(PosUserComponent, {\n                          handelPOSUser: handelPOSUser,\n                          isReset: isReset,\n                          handelisReset: handelisReset\n                        })\n                      })\n                    }), Object.keys(cart.orderItems).length > 0 ? /*#__PURE__*/_jsx(\"div\", {\n                      className: \"cartBlock\",\n                      children: Object.keys(cart.orderItems).map(list => Object.keys(cart.orderItems[list].selectedGroup).map(group => /*#__PURE__*/_jsxs(\"div\", {\n                        className: \"cartbody\",\n                        children: [/*#__PURE__*/_jsx(\"div\", {\n                          className: \"cartImg\",\n                          children: /*#__PURE__*/_jsx(\"img\", {\n                            src: cart.orderItems[list].menuitem.image,\n                            alt: \"Cart\"\n                          })\n                        }), /*#__PURE__*/_jsxs(\"div\", {\n                          className: \"cartContent\",\n                          children: [/*#__PURE__*/_jsxs(\"div\", {\n                            className: \"titlePriceBox\",\n                            children: [/*#__PURE__*/_jsx(\"p\", {\n                              className: \"cartItemname\",\n                              children: cart.orderItems[list].menuitem.title\n                            }), /*#__PURE__*/_jsxs(\"span\", {\n                              className: \"cartItemPrice\",\n                              children: [\"\\xA3\", cart.orderItems[list].selectedGroup[group].price]\n                            })]\n                          }), /*#__PURE__*/_jsxs(\"span\", {\n                            style: {\n                              fontSize: \"12px\"\n                            },\n                            children: [getCustomeTypeToString(cart.orderItems[list].selectedGroup[group].group), \" \"]\n                          }), /*#__PURE__*/_jsx(\"div\", {\n                            className: \"AddToCartBtn\",\n                            children: /*#__PURE__*/_jsx(QuantityBtn, {\n                              defvalue: cart.orderItems[list].selectedGroup[group].quantity,\n                              grpCus: true,\n                              groupId: group,\n                              itemId: list,\n                              getQuantity: () => {}\n                            })\n                          })]\n                        })]\n                      }, group)))\n                    }) : \"\", /*#__PURE__*/_jsxs(\"div\", {\n                      className: `subtotal`,\n                      children: [/*#__PURE__*/_jsx(\"div\", {\n                        className: \"valculationBox\",\n                        children: /*#__PURE__*/_jsxs(\"ul\", {\n                          children: [/*#__PURE__*/_jsxs(\"li\", {\n                            children: [/*#__PURE__*/_jsx(\"span\", {\n                              children: \"Subtotal\"\n                            }), /*#__PURE__*/_jsxs(\"span\", {\n                              children: [\"\\xA3 \", charge.subTotal]\n                            })]\n                          }), /*#__PURE__*/_jsxs(\"li\", {\n                            children: [/*#__PURE__*/_jsx(\"span\", {\n                              children: \"Discount\"\n                            }), /*#__PURE__*/_jsxs(\"span\", {\n                              children: [\"\\xA3 \", charge === null || charge === void 0 ? void 0 : charge.discount]\n                            })]\n                          })]\n                        })\n                      }), /*#__PURE__*/_jsxs(\"div\", {\n                        className: \"finalAmountBox\",\n                        children: [/*#__PURE__*/_jsx(\"span\", {\n                          children: \"Grand Total\"\n                        }), /*#__PURE__*/_jsxs(\"span\", {\n                          children: [\"\\xA3 \", charge.grandTotal]\n                        })]\n                      }), /*#__PURE__*/_jsxs(\"section\", {\n                        className: \"containerBox\",\n                        children: [/*#__PURE__*/_jsxs(\"div\", {\n                          className: \"selector\",\n                          children: [/*#__PURE__*/_jsxs(\"div\", {\n                            className: \"selecotr-item\",\n                            children: [/*#__PURE__*/_jsx(Input, {\n                              type: \"radio\",\n                              id: \"huey\",\n                              name: \"drone\",\n                              value: \"0\",\n                              checked: paymentMode === 0,\n                              onChange: e => setPaymentMode(0),\n                              className: \"selector-item_radio\"\n                            }), /*#__PURE__*/_jsx(\"label\", {\n                              for: \"huey\",\n                              className: \"selector-item_label\",\n                              children: \"Cash\"\n                            })]\n                          }), /*#__PURE__*/_jsxs(\"div\", {\n                            className: \"selecotr-item\",\n                            children: [/*#__PURE__*/_jsx(Input, {\n                              type: \"radio\",\n                              id: \"dewey\",\n                              name: \"drone\",\n                              value: \"1\",\n                              checked: paymentMode === 1,\n                              onChange: e => setPaymentMode(1),\n                              className: \"selector-item_radio\"\n                            }), /*#__PURE__*/_jsx(\"label\", {\n                              for: \"dewey\",\n                              className: \"selector-item_label\",\n                              children: \"Wallet\"\n                            })]\n                          }), /*#__PURE__*/_jsxs(\"div\", {\n                            className: \"selecotr-item\",\n                            children: [/*#__PURE__*/_jsx(Input, {\n                              type: \"radio\",\n                              id: \"louie\",\n                              name: \"drone\",\n                              value: \"2\",\n                              checked: paymentMode === 2,\n                              onChange: e => setPaymentMode(2),\n                              className: \"selector-item_radio\"\n                            }), /*#__PURE__*/_jsx(\"label\", {\n                              for: \"louie\",\n                              className: \"selector-item_label\",\n                              children: \"Card\"\n                            })]\n                          })]\n                        }), paymentMode !== 0 ? /*#__PURE__*/_jsxs(\"div\", {\n                          children: [/*#__PURE__*/_jsx(\"label\", {\n                            for: \"louie\",\n                            className: \"selector-item_label\",\n                            children: \"Transection ID\"\n                          }), /*#__PURE__*/_jsx(Input, {\n                            type: \"text\",\n                            id: \"transectionIdPOS\",\n                            name: \"transectionIdPOS\",\n                            value: transectionIdPOS,\n                            onChange: e => setTransectionIdPOS(e.target.value),\n                            className: \"selector-item_radio\"\n                          }), transectionIdError && !transectionIdPOS && /*#__PURE__*/_jsx(\"label\", {\n                            style: {\n                              color: \"red\"\n                            },\n                            children: \"Transection ID is required\"\n                          })]\n                        }) : \"\"]\n                      }), /*#__PURE__*/_jsxs(\"div\", {\n                        className: `bottumBtnBox`,\n                        children: [/*#__PURE__*/_jsx(Button, {\n                          onClick: confirmOrder,\n                          disabled: Object.keys(cart.orderItems).length > 0 ? false : true,\n                          type: \"button\",\n                          color: \"success\",\n                          children: \"Submit Order\"\n                        }), /*#__PURE__*/_jsx(Button, {\n                          onClick: clearCartData,\n                          disabled: Object.keys(cart.orderItems).length > 0 ? false : true,\n                          type: \"button\",\n                          color: \"danger\",\n                          children: \"Clear Cart\"\n                        })]\n                      })]\n                    })]\n                  })]\n                })]\n              }) : /*#__PURE__*/_jsx(\"div\", {\n                style: {\n                  textAlign: \"center\"\n                },\n                children: \"contact to admin for POS activation\"\n              })\n            })]\n          })\n        })\n      })\n    }), /*#__PURE__*/_jsx(Cart, {\n      isOpen: cartModal,\n      toggle: cartToggle,\n      item: cartItem,\n      storeId: storeDetail === null || storeDetail === void 0 ? void 0 : (_storeDetail$data6 = storeDetail.data) === null || _storeDetail$data6 === void 0 ? void 0 : _storeDetail$data6._id\n    }), /*#__PURE__*/_jsx(RemoveItem, {\n      isOpen: cartRemoveModal,\n      toggle: cartRemoveToggle,\n      itemId: itemId,\n      storeId: storeDetail === null || storeDetail === void 0 ? void 0 : (_storeDetail$data7 = storeDetail.data) === null || _storeDetail$data7 === void 0 ? void 0 : _storeDetail$data7._id\n    })]\n  });\n};\n\nindex.layout = Vendor;\nexport default index;","map":null,"metadata":{},"sourceType":"module"}