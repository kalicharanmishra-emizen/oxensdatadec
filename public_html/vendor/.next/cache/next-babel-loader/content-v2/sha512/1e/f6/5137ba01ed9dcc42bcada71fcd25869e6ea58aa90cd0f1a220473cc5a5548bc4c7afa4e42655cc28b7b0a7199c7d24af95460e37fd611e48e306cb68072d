{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, Col, Form, FormGroup, Input, Row } from 'reactstrap';\nimport FormInputCom from '../Form/FormInputCom';\nimport validator from 'validator';\nimport { updatePassword } from '../../reducers/authSlice';\nimport NProgress from 'nprogress';\nexport default function Password(props) {\n  var dispatch = useDispatch();\n\n  var _useState = useState({\n    old_pass: '',\n    new_pass: '',\n    con_pass: ''\n  }),\n      formSubmit = _useState[0],\n      setFormSubmit = _useState[1];\n\n  var _useState2 = useState(false),\n      submitValidate = _useState2[0],\n      setsubmitValidate = _useState2[1];\n\n  var _useState3 = useState({}),\n      confirmValidate = _useState3[0],\n      setConfirmValidate = _useState3[1];\n\n  var _useState4 = useState(false),\n      confirmValidateStatus = _useState4[0],\n      setConfirmValidateStatus = _useState4[1];\n\n  useEffect(function () {\n    setFormSubmit({\n      old_pass: '',\n      new_pass: '',\n      con_pass: ''\n    });\n  }, []);\n\n  var getValue = function getValue(data) {\n    formSubmit[data.key] = data.data;\n    confirmValidate[data.key] = data.error;\n    setConfirmValidate(_objectSpread({}, confirmValidate));\n    setFormSubmit(_objectSpread({}, formSubmit));\n    setsubmitValidate(false);\n  };\n\n  var formSubmitHandal = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setsubmitValidate(true); // console.log('final data before validate',formSubmit);\n\n              if (confirmValidateStatus) {\n                // console.log('final data',formSubmit);\n                data = formSubmit;\n                setFormSubmit({\n                  old_pass: '',\n                  new_pass: '',\n                  con_pass: ''\n                });\n                NProgress.start();\n                dispatch(updatePassword(data));\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function formSubmitHandal(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var something = true;\n\n    if (Object.keys(confirmValidate).length == 3) {\n      for (var key in confirmValidate) {\n        if (!!confirmValidate[key]) {\n          something = false;\n          setConfirmValidateStatus(false);\n        }\n      }\n\n      if (something) {\n        setConfirmValidateStatus(true);\n      }\n    }\n  }, [confirmValidate]);\n  return /*#__PURE__*/_jsx(Form, {\n    onSubmit: formSubmitHandal,\n    autoComplete: \"off\",\n    id: \"passwordForm\",\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"pl-lg-4\",\n      children: /*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsx(Col, {\n          lg: \"6\",\n          children: /*#__PURE__*/_jsxs(FormGroup, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              className: \"form-control-label\",\n              htmlFor: \"old_pass\",\n              children: \"Old Password\"\n            }), /*#__PURE__*/_jsx(FormInputCom, {\n              type: \"password\",\n              name: \"old_pass\",\n              placeholder: \"Old Password\",\n              optionData: [],\n              validator: [{\n                property: validator.isEmpty,\n                message: \"Old password is required\",\n                isNot: false\n              }],\n              getValue: getValue,\n              defValue: formSubmit.old_pass,\n              submitValidate: submitValidate\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Col, {\n          lg: \"6\",\n          children: /*#__PURE__*/_jsxs(FormGroup, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              className: \"form-control-label\",\n              htmlFor: \"input-name\",\n              children: \"New Password\"\n            }), /*#__PURE__*/_jsx(FormInputCom, {\n              type: \"password\",\n              name: \"new_pass\",\n              placeholder: \"New Password\",\n              optionData: [],\n              validator: [{\n                property: validator.isEmpty,\n                message: \"New password is required\",\n                isNot: false\n              }],\n              getValue: getValue,\n              defValue: formSubmit.new_pass,\n              submitValidate: submitValidate\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Col, {\n          lg: \"6\",\n          children: /*#__PURE__*/_jsxs(FormGroup, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              className: \"form-control-label\",\n              htmlFor: \"\",\n              children: \"Confirm Password\"\n            }), /*#__PURE__*/_jsx(FormInputCom, {\n              type: \"password\",\n              name: \"con_pass\",\n              placeholder: \"Confirm Password\",\n              optionData: [],\n              validator: [{\n                property: validator.isEmpty,\n                message: \"Confirm password is required\",\n                isNot: false\n              }, {\n                property: validator.equals,\n                valOption: formSubmit.new_pass,\n                message: \"Confirm password not match with New password\",\n                isNot: true\n              }],\n              getValue: getValue,\n              defValue: formSubmit.con_pass,\n              submitValidate: submitValidate\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Col, {\n          lg: \"12\",\n          children: /*#__PURE__*/_jsx(Button, {\n            className: \"float-right\",\n            color: \"primary\",\n            type: \"submit\",\n            children: \"Update\"\n          })\n        })]\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}