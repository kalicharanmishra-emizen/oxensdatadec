{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/components/Profile/Password.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, Col, Form, FormGroup, Input, Row } from 'reactstrap';\nimport FormInputCom from '../Form/FormInputCom';\nimport validator from 'validator';\nimport { updatePassword } from '../../reducers/authSlice';\nimport NProgress from 'nprogress';\nexport default function Password(props) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useState = useState({\n    old_pass: '',\n    new_pass: '',\n    con_pass: ''\n  }),\n      formSubmit = _useState[0],\n      setFormSubmit = _useState[1];\n\n  var _useState2 = useState(false),\n      submitValidate = _useState2[0],\n      setsubmitValidate = _useState2[1];\n\n  var _useState3 = useState({}),\n      confirmValidate = _useState3[0],\n      setConfirmValidate = _useState3[1];\n\n  var _useState4 = useState(false),\n      confirmValidateStatus = _useState4[0],\n      setConfirmValidateStatus = _useState4[1];\n\n  useEffect(function () {\n    setFormSubmit({\n      old_pass: '',\n      new_pass: '',\n      con_pass: ''\n    });\n  }, []);\n\n  var getValue = function getValue(data) {\n    formSubmit[data.key] = data.data;\n    confirmValidate[data.key] = data.error;\n    setConfirmValidate(_objectSpread({}, confirmValidate));\n    setFormSubmit(_objectSpread({}, formSubmit));\n    setsubmitValidate(false);\n  };\n\n  var formSubmitHandal = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setsubmitValidate(true); // console.log('final data before validate',formSubmit);\n\n              if (confirmValidateStatus) {\n                // console.log('final data',formSubmit);\n                data = formSubmit;\n                setFormSubmit({\n                  old_pass: '',\n                  new_pass: '',\n                  con_pass: ''\n                });\n                NProgress.start();\n                dispatch(updatePassword(data));\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function formSubmitHandal(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var something = true;\n\n    if (Object.keys(confirmValidate).length == 3) {\n      for (var key in confirmValidate) {\n        if (!!confirmValidate[key]) {\n          something = false;\n          setConfirmValidateStatus(false);\n        }\n      }\n\n      if (something) {\n        setConfirmValidateStatus(true);\n      }\n    }\n  }, [confirmValidate]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: formSubmitHandal,\n    autoComplete: \"off\",\n    id: \"passwordForm\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pl-lg-4\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          lg: \"6\",\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-control-label\",\n              htmlFor: \"old_pass\",\n              children: \"Old Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormInputCom, {\n              type: \"password\",\n              name: \"old_pass\",\n              placeholder: \"Old Password\",\n              optionData: [],\n              validator: [{\n                property: validator.isEmpty,\n                message: \"Old password is required\",\n                isNot: false\n              }],\n              getValue: getValue,\n              defValue: formSubmit.old_pass,\n              submitValidate: submitValidate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: \"6\",\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-control-label\",\n              htmlFor: \"input-name\",\n              children: \"New Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormInputCom, {\n              type: \"password\",\n              name: \"new_pass\",\n              placeholder: \"New Password\",\n              optionData: [],\n              validator: [{\n                property: validator.isEmpty,\n                message: \"New password is required\",\n                isNot: false\n              }],\n              getValue: getValue,\n              defValue: formSubmit.new_pass,\n              submitValidate: submitValidate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: \"6\",\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-control-label\",\n              htmlFor: \"\",\n              children: \"Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormInputCom, {\n              type: \"password\",\n              name: \"con_pass\",\n              placeholder: \"Confirm Password\",\n              optionData: [],\n              validator: [{\n                property: validator.isEmpty,\n                message: \"Confirm password is required\",\n                isNot: false\n              }, {\n                property: validator.equals,\n                valOption: formSubmit.new_pass,\n                message: \"Confirm password not match with New password\",\n                isNot: true\n              }],\n              getValue: getValue,\n              defValue: formSubmit.con_pass,\n              submitValidate: submitValidate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: \"12\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"float-right\",\n            color: \"primary\",\n            type: \"submit\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Password, \"pXzxBPQeUs8ImdAin+xdhooBG1U=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Password;\n\nvar _c;\n\n$RefreshReg$(_c, \"Password\");","map":{"version":3,"sources":["/var/www/domains/oxens.ezxdemo.com/public_html/vendor/components/Profile/Password.js"],"names":["React","useEffect","useState","useDispatch","Button","Col","Form","FormGroup","Input","Row","FormInputCom","validator","updatePassword","NProgress","Password","props","dispatch","old_pass","new_pass","con_pass","formSubmit","setFormSubmit","submitValidate","setsubmitValidate","confirmValidate","setConfirmValidate","confirmValidateStatus","setConfirmValidateStatus","getValue","data","key","error","formSubmitHandal","e","preventDefault","start","something","Object","keys","length","property","isEmpty","message","isNot","equals","valOption"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Button, Col, Form, FormGroup, Input, Row } from 'reactstrap'\nimport FormInputCom from '../Form/FormInputCom'\nimport validator from 'validator';\nimport { updatePassword } from '../../reducers/authSlice';\nimport NProgress from 'nprogress';\nexport default function Password(props) {\n    const dispatch = useDispatch()\n    const [formSubmit, setFormSubmit] = useState({\n        old_pass:'',\n        new_pass:'',\n        con_pass:''\n    })\n    const [submitValidate, setsubmitValidate] = useState(false)\n    const [confirmValidate, setConfirmValidate] = useState({})\n    const [confirmValidateStatus, setConfirmValidateStatus] = useState(false)\n    useEffect(() => {\n        setFormSubmit({\n            old_pass:'',\n            new_pass:'',\n            con_pass:''\n        })\n    }, [])\n    const getValue=(data)=>{\n        formSubmit[data.key]=data.data\n        confirmValidate[data.key]=data.error\n        setConfirmValidate({...confirmValidate})\n        setFormSubmit({...formSubmit})\n        setsubmitValidate(false)\n    }\n    const formSubmitHandal = async (e) =>{\n        e.preventDefault()\n        setsubmitValidate(true)\n        // console.log('final data before validate',formSubmit);\n        if(confirmValidateStatus){\n            // console.log('final data',formSubmit);\n            let data = formSubmit\n            setFormSubmit({\n                old_pass:'',\n                new_pass:'',\n                con_pass:''\n            })\n            NProgress.start()\n            dispatch(updatePassword(data))\n        }\n    }\n     useEffect(() => {\n        let something = true\n        if (Object.keys(confirmValidate).length==3) {\n            for (const key in confirmValidate) {\n                if (!(!confirmValidate[key])) {\n                    something = false\n                    setConfirmValidateStatus(false)\n                }\n            }\n            if(something){\n                setConfirmValidateStatus(true)\n            }\n        }\n    }, [confirmValidate])\n    return (\n        <Form onSubmit={formSubmitHandal} autoComplete=\"off\" id=\"passwordForm\">\n            <div className=\"pl-lg-4\">\n                <Row>\n                    <Col lg=\"6\">\n                        <FormGroup>\n                            <label\n                                className=\"form-control-label\"\n                                htmlFor=\"old_pass\"\n                            >\n                                Old Password\n                            </label>\n                            <FormInputCom\n                                type=\"password\"\n                                name=\"old_pass\"\n                                placeholder=\"Old Password\"\n                                optionData={[]}\n                                validator={\n                                    [\n                                        {\n                                            property:validator.isEmpty,\n                                            message:\"Old password is required\",\n                                            isNot:false\n                                        }\n                                    ]\n                                }\n                                getValue={getValue}\n                                defValue={formSubmit.old_pass}\n                                submitValidate={submitValidate}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col lg=\"6\">\n                        <FormGroup>\n                            <label\n                                className=\"form-control-label\"\n                                htmlFor=\"input-name\"\n                            >\n                                New Password\n                            </label>\n                            <FormInputCom\n                                type=\"password\"\n                                name=\"new_pass\"\n                                placeholder=\"New Password\"\n                                optionData={[]}\n                                validator={\n                                    [\n                                        {\n                                            property:validator.isEmpty,\n                                            message:\"New password is required\",\n                                            isNot:false\n                                        }\n                                    ]\n                                }\n                                getValue={getValue}\n                                defValue={formSubmit.new_pass}\n                                submitValidate={submitValidate}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col lg=\"6\">\n                        <FormGroup>\n                            <label\n                                className=\"form-control-label\"\n                                htmlFor=\"\"\n                            >\n                            Confirm Password\n                            </label>\n                                <FormInputCom\n                                    type=\"password\"\n                                    name=\"con_pass\"\n                                    placeholder=\"Confirm Password\"\n                                    optionData={[]}\n                                    validator={\n                                        [\n                                            {\n                                                property:validator.isEmpty,\n                                                message:\"Confirm password is required\",\n                                                isNot:false\n                                            },\n                                            {\n                                                property:validator.equals,\n                                                valOption:formSubmit.new_pass,\n                                                message:\"Confirm password not match with New password\",\n                                                isNot:true\n                                            }\n                                        ]\n                                    }\n                                    getValue={getValue}\n                                    defValue={formSubmit.con_pass}\n                                    submitValidate={submitValidate}\n                                />\n                        </FormGroup>\n                    </Col>\n                    <Col lg=\"12\">\n                        <Button\n                            className=\"float-right\"\n                            color=\"primary\"\n                            type=\"submit\"\n                        >\n                            Update\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        </Form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}