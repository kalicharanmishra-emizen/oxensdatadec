{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { callApi } from '../Helper/helper';\nimport { apiFail, apiSuccess } from './mainSlice';\nconst storeSlice = createSlice({\n  name: \"Store\",\n  initialState: {\n    filterList: {\n      isLoading: true,\n      type: []\n    },\n    storeDetail: {\n      isLoading: true,\n      data: null\n    },\n    storeItems: {\n      doc: [],\n      paginate: {\n        next: false,\n        curPage: 1,\n        nextPage: null\n      }\n    },\n    list: {\n      isLoading: true,\n      data: []\n    },\n    detail: null\n  },\n  reducers: {\n    setFilterList: (state, action) => {\n      state.filterList.isLoading = false;\n      state.filterList.type = action.payload.data;\n    },\n    setStoreDetail: (state, action) => {\n      state.storeDetail.isLoading = false, state.storeDetail.data = action.payload.data;\n    },\n    unSetStoreDetail: (state, action) => {\n      state.storeDetail.isLoading = true, state.storeDetail.data = null;\n    },\n    setStoreItems: (state, action) => {\n      state.storeItems.doc = state.storeItems.doc.concat(action.payload.data.docs), state.storeItems.paginate.next = action.payload.data.hasNextPage;\n      state.storeItems.paginate.curPage = action.payload.data.page;\n      state.storeItems.paginate.nextPage = action.payload.data.nextPage;\n    },\n    reinitializeStoreItems: (state, action) => {\n      state.storeItems.doc = action.payload.data.docs, state.storeItems.paginate.next = action.payload.data.hasNextPage;\n      state.storeItems.paginate.curPage = action.payload.data.page;\n      state.storeItems.paginate.nextPage = action.payload.data.nextPage;\n    },\n    getOrderListing: (state, action) => {\n      state.list = {\n        isLoading: false,\n        data: action.payload.data\n      };\n    },\n    setDetail: (state, action) => {\n      state.detail = action.payload.data;\n    },\n    unSetDetail: (state, action) => {\n      state.detail = null;\n    }\n  }\n});\nconst {\n  setFilterList,\n  setStoreDetail,\n  setStoreItems,\n  reinitializeStoreItems,\n  getOrderListing,\n  setDetail,\n  unSetDetail\n} = storeSlice.actions;\nexport default storeSlice.reducer;\nexport const getFilterList = () => async dispatch => {\n  try {\n    let res = await callApi('post', '/store/filterlisting');\n    dispatch(setFilterList(res.data));\n  } catch (error) {\n    apiFail(error);\n  }\n};\nexport const getStoreDetail = () => async dispatch => {\n  try {\n    let res = await callApi('post', '/store/detail', {});\n    dispatch(setStoreDetail(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};\nexport const getStoreItems = (value, page = 1) => async dispatch => {\n  try {\n    let res = await callApi('post', `/store/productlist?page=${page}`, value);\n    dispatch(setStoreItems(res.data));\n  } catch (error) {\n    apiFail(error);\n  }\n};\nexport const setFilterStoreItems = value => async dispatch => {\n  try {\n    let res = await callApi('post', `/store/productlist?page=1`, value);\n    dispatch(reinitializeStoreItems(res.data));\n  } catch (error) {\n    apiFail(error);\n  }\n};\nexport const getCompletedorders = (page = 1) => async dispatch => {\n  try {\n    const res = await callApi(\"post\", `/store/posOrder?page=${page}`, {});\n    dispatch(getOrderListing(res.data));\n    dispatch(unSetDetail());\n  } catch (error) {\n    apiFail(error);\n  }\n};\nexport const posorderDetail = value => async dispatch => {\n  try {\n    const res = await callApi(\"post\", \"/store/posdetail\", value);\n    console.log(\"pos detail res\", res.data);\n    dispatch(setDetail(res.data));\n  } catch (error) {\n    apiFail(error);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}