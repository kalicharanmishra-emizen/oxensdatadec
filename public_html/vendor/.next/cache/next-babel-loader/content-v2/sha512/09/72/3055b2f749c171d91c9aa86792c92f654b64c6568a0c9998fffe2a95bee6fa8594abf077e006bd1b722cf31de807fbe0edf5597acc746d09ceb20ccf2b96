{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { logout } from 'reducers/authSlice';\nimport { callApi } from \"../Helper/helper\";\nconst mainSlice = createSlice({\n  name: 'mainSlice',\n  initialState: {\n    charge: {},\n    success: null,\n    failed: null,\n    cart: {\n      orderItems: {},\n      storeId: null,\n      orderType: 0,\n      totalQuantity: 0,\n      totalAmount: 0.00\n    },\n    placeOrderData: {},\n    POSuser: []\n  },\n  reducers: {\n    apiFailed: (state, action) => {\n      console.log('error value', action.payload);\n      state.failed = action.payload;\n    },\n    unsetApiFailed: (state, action) => {\n      state.failed = null;\n    },\n    apiSucceed: (state, action) => {\n      state.success = action.payload;\n    },\n    unsetApiSucceed: (state, action) => {\n      state.success = null;\n    },\n    setCart: (state, action) => {\n      if (action.payload) {\n        state.cart = action.payload;\n      } else {\n        state.cart = {\n          orderItems: {},\n          storeId: null,\n          orderType: 0,\n          totalQuantity: 0,\n          totalAmount: 0.00\n        };\n      }\n    },\n    setCharge: (state, action) => {\n      state.charge = action.payload.data;\n    },\n    getPlaceOeder: (state, action) => {\n      state.placeOrderData = action.payload.data;\n    },\n    getPOSuser: (state, action) => {\n      state.POSuser = action.payload.data;\n    }\n  }\n});\nconst {\n  apiFailed,\n  unsetApiFailed,\n  apiSucceed,\n  unsetApiSucceed,\n  setCart,\n  setCharge,\n  getPlaceOeder,\n  getPOSuser\n} = mainSlice.actions;\nexport default mainSlice.reducer;\nexport const apiSuccess = value => async dispatch => {\n  dispatch(apiSucceed(value));\n};\nexport const apiFail = value => async dispatch => {\n  if (value.statusCode == 419) {\n    dispatch(logout());\n  } else {\n    dispatch(apiFailed(value));\n  }\n};\nexport const unSetApiFail = () => async dispatch => {\n  dispatch(unsetApiFailed());\n};\nexport const unSetApiSucc = () => async dispatch => {\n  dispatch(unsetApiSucceed());\n};\nexport const manageCartData = () => async dispatch => {\n  dispatch(setCart(JSON.parse(localStorage.getItem('cart'))));\n};\nexport const getAllOrderCharge = () => async dispatch => {\n  try {\n    let res = await callApi('post', '/store/orderAllCharge', {});\n    dispatch(setCharge(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};\nexport const placeOrder = value => async dispatch => {\n  try {\n    let res = await callApi('post', '/store/placeorder', value);\n    dispatch(getPlaceOeder(res.data));\n    dispatch(apiSuccess(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};\nexport const getPOSusers = value => async dispatch => {\n  try {\n    console.log(\"value\", value);\n    let res = await callApi('post', '/store/posuser', value);\n    console.log(\"resss ===============\", res.data);\n    dispatch(getPOSuser(res.data));\n  } catch (error) {\n    dispatch(apiFail(error));\n  }\n};","map":{"version":3,"sources":["/var/www/domains/oxens.ezxdemo.com/public_html/vendor/reducers/mainSlice.js"],"names":["createSlice","logout","callApi","mainSlice","name","initialState","charge","success","failed","cart","orderItems","storeId","orderType","totalQuantity","totalAmount","placeOrderData","POSuser","reducers","apiFailed","state","action","console","log","payload","unsetApiFailed","apiSucceed","unsetApiSucceed","setCart","setCharge","data","getPlaceOeder","getPOSuser","actions","reducer","apiSuccess","value","dispatch","apiFail","statusCode","unSetApiFail","unSetApiSucc","manageCartData","JSON","parse","localStorage","getItem","getAllOrderCharge","res","error","placeOrder","getPOSusers"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { logout } from 'reducers/authSlice'\nimport { callApi } from \"../Helper/helper\";\nconst mainSlice = createSlice({\n    name:'mainSlice',\n    initialState:{\n        charge:{},\n        success:null,\n        failed:null,\n        cart:{\n            orderItems:{},\n            storeId:null,\n            orderType:0,\n            totalQuantity:0,\n            totalAmount:0.00,\n        },\n        placeOrderData:{},\n        POSuser:[]\n    },\n    reducers:{\n        apiFailed:(state,action)=>{\n            console.log('error value',action.payload);\n            state.failed = action.payload \n        },\n        unsetApiFailed:(state,action)=>{\n            state.failed=null;\n        },\n        apiSucceed:(state,action)=>{\n            state.success = action.payload \n        },\n        unsetApiSucceed:(state,action)=>{\n            state.success=null;\n        },\n        setCart:(state,action)=>{\n            if(action.payload){\n                state.cart = action.payload\n            }else{\n                state.cart = {\n                    orderItems:{},\n                    storeId:null,\n                    orderType:0,\n                    totalQuantity:0,\n                    totalAmount:0.00,\n                }\n            }\n        },\n        setCharge:(state,action)=>{\n            state.charge=action.payload.data\n        },\n        getPlaceOeder:(state, action)=>{\n            state.placeOrderData = action.payload.data\n        },\n        getPOSuser:(state, action)=>{\n            state.POSuser = action.payload.data\n        }\n    }\n});\nconst { apiFailed, unsetApiFailed, apiSucceed, unsetApiSucceed, setCart, setCharge, getPlaceOeder, getPOSuser } =mainSlice.actions\nexport default mainSlice.reducer\n\nexport const apiSuccess = (value) => async dispatch => {\n    dispatch( apiSucceed(value) )\n}\nexport const apiFail = (value) => async dispatch => {\n    if (value.statusCode == 419) {\n        dispatch( logout() )   \n    }else{\n        dispatch( apiFailed(value) )\n    }\n}\nexport const unSetApiFail = () => async dispatch =>{\n    dispatch( unsetApiFailed() )\n}\nexport const unSetApiSucc = () => async dispatch =>{\n    dispatch( unsetApiSucceed() )\n}\nexport const manageCartData = () => async dispatch =>{\n    dispatch( setCart(JSON.parse(localStorage.getItem('cart'))) )\n}\nexport const getAllOrderCharge = () => async dispatch => {\n    try {\n        let res = await callApi('post','/store/orderAllCharge',{})\n        dispatch(setCharge(res.data))\n    } catch (error) {\n        dispatch(apiFail(error))\n    }\n};\nexport const placeOrder = (value) => async dispatch => {\n    try {\n        let res = await callApi('post','/store/placeorder',value)\n        dispatch(getPlaceOeder(res.data))\n        dispatch(apiSuccess(res.data))\n    } catch (error) {\n        dispatch(apiFail(error))\n    }\n};\nexport const getPOSusers = (value) => async dispatch => {\n    try {\n        console.log(\"value\", value);\n        let res = await callApi('post','/store/posuser',value)\n        console.log(\"resss ===============\", res.data);\n        dispatch(getPOSuser(res.data))\n    } catch (error) {\n        dispatch(apiFail(error))\n    }\n};"]},"metadata":{},"sourceType":"module"}