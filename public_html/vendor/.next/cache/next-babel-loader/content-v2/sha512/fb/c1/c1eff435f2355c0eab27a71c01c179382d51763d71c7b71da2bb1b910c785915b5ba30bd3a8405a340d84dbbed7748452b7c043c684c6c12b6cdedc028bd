{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Vendor from \"layouts/Vendor\";\nimport UserHeader from \"components/Headers/UserHeader\";\nimport { Button, Card, CardBody, CardHeader, Col, Container, Form, FormGroup, Row } from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport InputCom from '../../components/Form/InputCom';\nimport FromSelect from '../../components/Form/FromSelect';\nimport { useEffect, useState } from \"react\";\nimport { getDiscount, updateDiscount } from \"../../reducers/discountSlice\";\nimport { unSetApiSucc, unSetApiFail } from \"reducers/mainSlice\";\nimport nProgress from \"nprogress\";\nimport { toast } from \"react-toastify\";\n\nfunction Index() {\n  const dispatch = useDispatch();\n  const discountData = useSelector(state => state.discountSlice.list);\n  const apiError = useSelector(state => state.mainSlice.failed);\n  const apiSuccess = useSelector(state => state.mainSlice.success);\n  const validationSchema = Yup.object().shape({\n    discountType: Yup.number().required('Discount Type is required'),\n    discountValue: Yup.number().when('discountType', {\n      is: 0,\n      then: Yup.number().typeError('Discount must be a number').required('Discount is required').positive('Discount must be positive number').integer('Discount must be integer number')\n    }),\n    maxDiscount: Yup.number().typeError('Max Discount must be a number').required('Max Discount is required').positive('Max Discount must be positive number')\n  });\n\n  const formSubmitHandal = formData => {\n    nProgress.start();\n    dispatch(updateDiscount(formData));\n  };\n\n  useEffect(() => {\n    dispatch(getDiscount());\n  }, []);\n  useEffect(() => {\n    if (apiSuccess) {\n      if (apiSuccess.statusCode >= 200 && apiSuccess.statusCode < 300) {\n        toast(apiSuccess.message, {\n          type: 'success',\n          toastId: 12\n        });\n        dispatch(unSetApiSucc());\n        nProgress.done();\n      }\n    }\n\n    if (apiError) {\n      if (apiError.statusCode >= 400 && apiError.statusCode <= 500) {\n        toast(apiError.message, {\n          type: 'error',\n          toastId: 12\n        });\n        dispatch(unSetApiFail());\n        nProgress.done();\n      }\n    }\n  }, [apiSuccess, apiError]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(UserHeader, {}), /*#__PURE__*/_jsx(Container, {\n      className: \"mt--7\",\n      fluid: true,\n      children: /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsx(Col, {\n          className: \"order-xl-1\",\n          xl: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"bg-secondary shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-white border-0\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(Col, {\n                  xs: \"8\",\n                  children: /*#__PURE__*/_jsx(\"h3\", {\n                    className: \"mb-0\",\n                    children: \"Discount Manager\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsx(Formik, {\n                enableReinitialize: true,\n                initialValues: discountData,\n                validationSchema: validationSchema,\n                validateOnChange: false,\n                validateOnBlur: false,\n                onSubmit: values => formSubmitHandal(values),\n                children: formikProps => /*#__PURE__*/_jsx(Form, {\n                  onSubmit: formikProps.handleSubmit,\n                  children: /*#__PURE__*/_jsxs(Row, {\n                    children: [/*#__PURE__*/_jsx(Col, {\n                      xl: \"12\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          children: \"Discount Type\"\n                        }), /*#__PURE__*/_jsx(FromSelect, {\n                          name: \"discountType\",\n                          id: \"discountType\",\n                          options: [{\n                            value: \"0\",\n                            label: \"Percentage\"\n                          }, {\n                            value: \"1\",\n                            label: \"Fixed\"\n                          }],\n                          isDefault: false,\n                          isMulti: false,\n                          getValue: formikProps.setFieldValue,\n                          defValue: formikProps.values.discountType.toString() || '',\n                          error: formikProps.errors.discountType\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      xl: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          children: \"Discount (%)\"\n                        }), /*#__PURE__*/_jsx(InputCom, {\n                          type: \"text\",\n                          name: \"discountValue\",\n                          isDefault: formikProps.values.discountType == 1 ? true : false,\n                          placeholder: \"Enter Title\",\n                          getValue: formikProps.setFieldValue,\n                          defValue: formikProps.values.discountValue,\n                          error: formikProps.errors.discountValue\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      xl: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          children: \"Max Discount Price (\\xA3)\"\n                        }), /*#__PURE__*/_jsx(InputCom, {\n                          type: \"text\",\n                          name: \"maxDiscount\",\n                          placeholder: \"Enter max discount\",\n                          getValue: formikProps.setFieldValue,\n                          defValue: formikProps.values.maxDiscount,\n                          error: formikProps.errors.maxDiscount\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"12\",\n                      children: /*#__PURE__*/_jsx(Button, {\n                        className: \"float-right\",\n                        color: \"primary\",\n                        type: \"submit\",\n                        children: \"Save\"\n                      })\n                    })]\n                  })\n                })\n              })\n            })]\n          })\n        })\n      })\n    })]\n  });\n}\n\nIndex.layout = Vendor;\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}