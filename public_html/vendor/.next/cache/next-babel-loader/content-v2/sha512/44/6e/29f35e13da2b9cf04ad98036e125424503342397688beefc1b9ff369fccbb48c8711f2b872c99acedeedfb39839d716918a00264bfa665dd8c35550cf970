{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\nimport { callApi } from '../../Helper/helper';\nimport \"../../styles/posUser.css\";\n\nconst POSuser = props => {\n  var _props$itemId;\n\n  // globel states\n  const {\n    0: userFormModal,\n    1: setUserFormModal\n  } = useState(false);\n  const {\n    0: existsUser,\n    1: setExistsUser\n  } = useState(\"\");\n  const initalValue = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNo: (_props$itemId = props === null || props === void 0 ? void 0 : props.itemId) !== null && _props$itemId !== void 0 ? _props$itemId : \"\"\n  }; // form validation\n\n  const validationSchema = Yup.object().shape({\n    firstName: Yup.string().required('First name is required'),\n    lastName: Yup.string().required('Last name is required'),\n    email: Yup.string().required('Email is required').email(\"Email must be a valid email address\"),\n    phoneNo: Yup.string().required('Phone No is required').matches(/^[1-9][0-9]{9,13}$/g, 'Phone number is not valid')\n  }); // submit form and save POS user in db\n\n  const formSubmitHandal = async value => {\n    try {\n      var _res$data, _res$data$data, _res$data2, _res$data2$data, _res$data3, _res$data3$data, _res$data4, _res$data4$data, _res$data5, _res$data5$data, _res$data6;\n\n      const res = await callApi(\"post\", \"/store/createPOSuser\", value);\n\n      if (res) {\n        setUserFormModal(false);\n      }\n\n      setExistsUser(\"\");\n      const rawData = {\n        key: res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data._id,\n        value: (res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.firstName) + \" \" + (res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$data = _res$data3.data) === null || _res$data3$data === void 0 ? void 0 : _res$data3$data.lastName) + \" \" + (res === null || res === void 0 ? void 0 : (_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : (_res$data4$data = _res$data4.data) === null || _res$data4$data === void 0 ? void 0 : _res$data4$data.phoneNo),\n        phoneno: res === null || res === void 0 ? void 0 : (_res$data5 = res.data) === null || _res$data5 === void 0 ? void 0 : (_res$data5$data = _res$data5.data) === null || _res$data5$data === void 0 ? void 0 : _res$data5$data.phoneNo\n      };\n      props.getTempUser(rawData);\n      console.log(\"rawData\", rawData);\n      console.log(\"res\", res === null || res === void 0 ? void 0 : (_res$data6 = res.data) === null || _res$data6 === void 0 ? void 0 : _res$data6.data);\n    } catch (error) {\n      setExistsUser(error.message); // already exists user set error\n    }\n  };\n\n  const handleReset = resetForm => {\n    resetForm();\n    setExistsUser(\"\");\n  };\n\n  useEffect(() => {\n    setUserFormModal(props.isOpen); // Toggle user form model \n  }, [props.isOpen]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(Modal, {\n      isOpen: userFormModal,\n      className: \"\",\n      children: [/*#__PURE__*/_jsxs(ModalHeader, {\n        className: \"modelHeader\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"modelHeaderTitle\",\n          children: \"Create New User\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"bg-close\",\n          onClick: () => props.toggle()\n        })]\n      }), /*#__PURE__*/_jsx(ModalBody, {\n        className: \"\",\n        children: /*#__PURE__*/_jsx(Formik, {\n          enableReinitialize: true,\n          initialValues: initalValue,\n          validationSchema: validationSchema,\n          onSubmit: (values, {\n            resetForm\n          }) => {\n            formSubmitHandal(values);\n            resetForm({\n              firstName: \"\",\n              lastName: \"\",\n              email: \"\",\n              phoneNo: \"\"\n            });\n          },\n          children: formikProps => /*#__PURE__*/_jsx(Form, {\n            onSubmit: formikProps.handleSubmit,\n            children: /*#__PURE__*/_jsxs(Row, {\n              children: [/*#__PURE__*/_jsx(Col, {\n                xl: \"6\",\n                children: /*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label\",\n                    children: \" First Name \"\n                  }), /*#__PURE__*/_jsx(Input, {\n                    type: \"text\",\n                    name: \"firstName\",\n                    placeholder: \"Enter First Name\",\n                    value: formikProps.values.firstName,\n                    onChange: formikProps.handleChange\n                  }), formikProps.touched.firstName && formikProps.errors.firstName ? /*#__PURE__*/_jsx(\"div\", {\n                    style: {\n                      color: \"red\"\n                    },\n                    className: \"form-error\",\n                    children: formikProps.errors.firstName\n                  }) : null]\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                xl: \"6\",\n                children: /*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label\",\n                    children: \" Last Name \"\n                  }), /*#__PURE__*/_jsx(Input, {\n                    type: \"text\",\n                    name: \"lastName\",\n                    placeholder: \"Enter last Name\",\n                    value: formikProps.values.lastName,\n                    onChange: formikProps.handleChange\n                  }), formikProps.touched.lastName && formikProps.errors.lastName ? /*#__PURE__*/_jsx(\"div\", {\n                    style: {\n                      color: \"red\"\n                    },\n                    className: \"form-error\",\n                    children: formikProps.errors.lastName\n                  }) : null]\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                xl: \"6\",\n                children: /*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label\",\n                    children: \" Email  \"\n                  }), /*#__PURE__*/_jsx(Input, {\n                    type: \"text\",\n                    name: \"email\",\n                    placeholder: \"Enter Email\",\n                    value: formikProps.values.email,\n                    onChange: formikProps.handleChange\n                  }), formikProps.touched.email && formikProps.errors.email ? /*#__PURE__*/_jsx(\"div\", {\n                    style: {\n                      color: \"red\"\n                    },\n                    className: \"form-error\",\n                    children: formikProps.errors.email\n                  }) : null]\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                xl: \"6\",\n                children: /*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label\",\n                    children: \" Phone Number \"\n                  }), /*#__PURE__*/_jsx(Input, {\n                    type: \"text\",\n                    name: \"phoneNo\",\n                    placeholder: \"Enter Mobile No\",\n                    value: formikProps.values.phoneNo,\n                    onChange: formikProps.handleChange\n                  }), formikProps.touched.phoneNo && formikProps.errors.phoneNo ? /*#__PURE__*/_jsx(\"div\", {\n                    style: {\n                      color: \"red\"\n                    },\n                    className: \"form-error\",\n                    children: formikProps.errors.phoneNo\n                  }) : null]\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                xl: \"12\",\n                children: /*#__PURE__*/_jsx(FormGroup, {\n                  children: existsUser && existsUser ? /*#__PURE__*/_jsx(\"div\", {\n                    className: \"form-error\",\n                    style: {\n                      color: \"red\"\n                    },\n                    children: existsUser\n                  }) : \"\"\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                md: \"6\",\n                children: /*#__PURE__*/_jsx(Button, {\n                  onClick: handleReset.bind(null, formikProps.resetForm),\n                  type: \"button\",\n                  color: \"danger\",\n                  style: {\n                    width: \"100%\"\n                  },\n                  children: \"Reset\"\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                md: \"6\",\n                children: /*#__PURE__*/_jsx(Button, {\n                  color: \"primary\",\n                  type: \"submit\",\n                  style: {\n                    width: \"100%\"\n                  },\n                  children: \"Save\"\n                })\n              })]\n            })\n          })\n        })\n      })]\n    })\n  });\n};\n\nexport default POSuser;","map":null,"metadata":{},"sourceType":"module"}