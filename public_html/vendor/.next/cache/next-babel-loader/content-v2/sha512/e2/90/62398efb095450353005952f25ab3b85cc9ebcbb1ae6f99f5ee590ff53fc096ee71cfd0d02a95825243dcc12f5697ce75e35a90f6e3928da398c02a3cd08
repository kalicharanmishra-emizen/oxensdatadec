{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/domains/oxens.ezxdemo.com/public_html/vendor/components/Map/MapWrapper.js\";\nimport { useEffect, useRef, useState } from \"react\";\n\nconst MapWrapper = props => {\n  const mapRef = useRef(null);\n  const {\n    0: location,\n    1: setLocation\n  } = useState({\n    lat: \"40.748817\",\n    lng: \"-73.985428\"\n  });\n  useEffect(() => {\n    setLocation({\n      lat: props.location.lat != '' ? props.location.lat : \"40.748817\",\n      lng: props.location.lng != '' ? props.location.lng : \"-73.985428\"\n    });\n  }, [props.location]);\n  useEffect(() => {\n    let google = window.google;\n    let map = mapRef.current;\n    let lat = location.lat;\n    let lng = location.lng;\n    const myLatlng = new google.maps.LatLng(lat, lng);\n    const geoCode = new google.maps.Geocoder();\n    const mapOptions = {\n      zoom: 16,\n      center: myLatlng,\n      scrollwheel: false,\n      zoomControl: true,\n      fullscreenControl: false,\n      mapTypeControl: false,\n      streetViewControl: false,\n      styles: [{\n        featureType: \"administrative\",\n        elementType: \"labels.text.fill\",\n        stylers: [{\n          color: \"#444444\"\n        }]\n      }, {\n        featureType: \"landscape\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#f2f2f2\"\n        }]\n      }, {\n        featureType: \"poi\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"road\",\n        elementType: \"all\",\n        stylers: [{\n          saturation: -100\n        }, {\n          lightness: 45\n        }]\n      }, {\n        featureType: \"road.highway\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"simplified\"\n        }]\n      }, {\n        featureType: \"road.arterial\",\n        elementType: \"labels.icon\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"transit\",\n        elementType: \"all\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }, {\n        featureType: \"water\",\n        elementType: \"all\",\n        stylers: [{\n          color: \"#5e72e4\"\n        }, {\n          visibility: \"on\"\n        }]\n      }]\n    };\n    map = new google.maps.Map(map, mapOptions);\n    const marker = new google.maps.Marker({\n      position: myLatlng,\n      map: map,\n      animation: google.maps.Animation.DROP,\n      title: \"Light Bootstrap Dashboard PRO React!\"\n    });\n    google.maps.event.addListener(map, 'drag', function () {\n      marker.setPosition(this.getCenter());\n    });\n    google.maps.event.addListener(map, 'dragend', function () {\n      marker.setPosition(this.getCenter()); // set marker position to map center\n\n      geoCode.geocode({\n        latLng: this.getCenter()\n      }, function (responses) {\n        if (responses && responses.length > 0) {\n          props.getLocation(responses[0]);\n        } else {\n          console.log('error map');\n        }\n      });\n    });\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    // style={{height: '450px'}}\n    className: \"map-canvas\",\n    id: \"map-canvas\",\n    ref: mapRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 7\n  }, this);\n};\n\nexport default MapWrapper;","map":{"version":3,"sources":["/var/www/domains/oxens.ezxdemo.com/public_html/vendor/components/Map/MapWrapper.js"],"names":["useEffect","useRef","useState","MapWrapper","props","mapRef","location","setLocation","lat","lng","google","window","map","current","myLatlng","maps","LatLng","geoCode","Geocoder","mapOptions","zoom","center","scrollwheel","zoomControl","fullscreenControl","mapTypeControl","streetViewControl","styles","featureType","elementType","stylers","color","visibility","saturation","lightness","Map","marker","Marker","position","animation","Animation","DROP","title","event","addListener","setPosition","getCenter","geocode","latLng","responses","length","getLocation","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst MapWrapper = (props) => {\n    const mapRef = useRef(null);\n    const [location,setLocation] = useState({\n        lat:\"40.748817\",\n        lng:\"-73.985428\"\n    })\n    useEffect(()=>{\n        setLocation({\n            lat:props.location.lat!=''?props.location.lat:\"40.748817\",\n            lng:props.location.lng!=''?props.location.lng:\"-73.985428\"\n        })\n    },[props.location])\n    useEffect(() => {\n        let google = window.google;\n        let map = mapRef.current;\n        let lat = location.lat;\n        let lng = location.lng;\n        const myLatlng = new google.maps.LatLng(lat, lng);\n        const geoCode = new google.maps.Geocoder()\n        const mapOptions = {\n            zoom: 16,\n            center: myLatlng,\n            scrollwheel: false,\n            zoomControl: true,\n            fullscreenControl:false,\n            mapTypeControl:false,\n            streetViewControl: false,\n            styles: [\n                {\n                    featureType: \"administrative\",\n                    elementType: \"labels.text.fill\",\n                    stylers: [{ color: \"#444444\" }],\n                },\n                {\n                    featureType: \"landscape\",\n                    elementType: \"all\",\n                    stylers: [{ color: \"#f2f2f2\" }],\n                },\n                {\n                    featureType: \"poi\",\n                    elementType: \"all\",\n                    stylers: [{ visibility: \"off\" }],\n                },\n                {\n                    featureType: \"road\",\n                    elementType: \"all\",\n                    stylers: [{ saturation: -100 }, { lightness: 45 }],\n                },\n                {\n                    featureType: \"road.highway\",\n                    elementType: \"all\",\n                    stylers: [{ visibility: \"simplified\" }],\n                },\n                {\n                    featureType: \"road.arterial\",\n                    elementType: \"labels.icon\",\n                    stylers: [{ visibility: \"off\" }],\n                },\n                {\n                    featureType: \"transit\",\n                    elementType: \"all\",\n                    stylers: [{ visibility: \"off\" }],\n                },\n                {\n                    featureType: \"water\",\n                    elementType: \"all\",\n                    stylers: [{ color: \"#5e72e4\" }, { visibility: \"on\" }],\n                },\n            ],\n        };\n        map = new google.maps.Map(map, mapOptions);\n        const marker = new google.maps.Marker({\n            position: myLatlng,\n            map: map,\n            animation: google.maps.Animation.DROP,\n            title: \"Light Bootstrap Dashboard PRO React!\",\n        });\n        google.maps.event.addListener(map, 'drag', function () {  \n            marker.setPosition(this.getCenter());\n        });\n        google.maps.event.addListener(map, 'dragend', function () {\n            marker.setPosition(this.getCenter()); // set marker position to map center\n            geoCode.geocode({\n                latLng: this.getCenter()\n                }, function(responses) {\n                if (responses && responses.length > 0) {\n                    props.getLocation(responses[0])\n                } else {\n                    console.log('error map');\n                }\n                })\n        });\n    }, [location]);\n    return (\n      <div\n        // style={{height: '450px'}}\n        className=\"map-canvas\"\n        id=\"map-canvas\"\n        ref={mapRef}\n      />\n    );\n};\nexport default MapWrapper"]},"metadata":{},"sourceType":"module"}