{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport styles from '../../styles/cart.module.css';\nimport { Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\nimport Link from 'next/link';\nimport QuantityBtn from '../quantityBtn';\nimport _ from \"lodash\";\nimport { manageCartData } from '../../reducers/mainSlice';\nimport { useDispatch } from 'react-redux';\nimport \"../../styles/cartModel.css\";\nexport default function Cart(props) {\n  const dispatch = useDispatch();\n  const {\n    0: variant,\n    1: setVariant\n  } = useState({});\n  const {\n    0: item,\n    1: setItem\n  } = useState(null);\n  const {\n    0: itemPrice,\n    1: setItemPrice\n  } = useState(0.00);\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState(1);\n  const {\n    0: tempChildData,\n    1: setTempChildData\n  } = useState({});\n\n  const getQuantity = data => {\n    setQuantity(data);\n  };\n\n  const resetChildDep = data => {\n    // console.log('data',data);\n    let tempChild = {};\n\n    if (Object.keys(data).length != 0) {\n      Object.keys(data).map(childDep => {\n        let selectedInput = document.querySelector(`input[name=\"${childDep}\"]:checked`);\n        let selValue = selectedInput ? selectedInput.value : '';\n        data[childDep].childCus.map(tempCus => {\n          let childCus = props.item.customize.filter(dataCus => dataCus.dependent_with == tempCus._id);\n\n          if (childCus.length != 0) {\n            tempChild[tempCus._id] = {\n              childCus: childCus,\n              data: data\n            };\n          }\n\n          let varListRow = [];\n          tempCus.variants.map(varList => {\n            let price = varList.dependent_price.find(raw => raw.varientId == selValue);\n\n            if (price !== undefined) {\n              varListRow.push({\n                _id: varList._id,\n                title: varList.title,\n                price: price,\n                isDefault: varList.isDefault\n              });\n            }\n          });\n          variant[childDep][tempCus._id] = varListRow;\n        });\n      });\n      setVariant(_objectSpread({}, variant));\n      setTempChildData(tempChild);\n    }\n  };\n\n  const handelChange = e => {\n    let cusId = e.currentTarget.name;\n    let type = e.currentTarget.type;\n    let tempChild = {};\n\n    if (type == 'radio') {\n      let depCus = props.item.customize.filter(dataCus => dataCus.dependent_with == cusId);\n\n      if (depCus.length != 0) {\n        depCus.map(data => {\n          let childCus = props.item.customize.filter(dataCus => dataCus.dependent_with == data._id);\n\n          if (childCus.length != 0) {\n            // console.log(data.title,' childCus',childCus);\n            tempChild[data._id] = {\n              childCus: childCus,\n              data: data\n            };\n          }\n\n          let varListRow = [];\n          data.variants.map(varList => {\n            let price = varList.dependent_price.find(raw => raw.varientId == e.currentTarget.value);\n\n            if (price !== undefined) {\n              varListRow.push({\n                _id: varList._id,\n                title: varList.title,\n                price: price,\n                isDefault: varList.isDefault\n              });\n            }\n          });\n          variant[cusId][data._id] = varListRow;\n        });\n        setVariant(_objectSpread({}, variant));\n        setTempChildData(tempChild);\n      }\n    }\n\n    calculatePrice();\n  };\n\n  const calculatePrice = () => {\n    let tempPrice = Number(item.price);\n    console.log(\"item price\", tempPrice);\n    item.customize.map(data => {\n      let inputs = document.querySelectorAll(`input[name=\"${data._id}\"]`);\n\n      for (const input of inputs) {\n        if (input.checked) {\n          tempPrice += Number(input.getAttribute('price'));\n        }\n      }\n    }); // console.log('tempPrice',tempPrice);\n\n    setItemPrice(tempPrice * quantity);\n  };\n\n  const addItemToCart = () => {\n    let cart = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : {\n      orderItems: {},\n      storeId: props.storeId,\n      totalQuantity: 0,\n      totalAmount: 0.00,\n      orderType: 0\n    };\n    let latestGroup = cart.orderItems[item._id] ? cart.orderItems[item._id].latestGroup : [];\n    let selectedGroup = cart.orderItems[item._id] ? cart.orderItems[item._id].selectedGroup : {};\n    /* find all checked input and group tham start*/\n\n    let checkedInputs = {};\n    item.customize.map(data => {\n      let groupCheckInput = [];\n      let inputs = document.querySelectorAll(`input[name=\"${data._id}\"]`);\n\n      for (const input of inputs) {\n        if (input.checked) groupCheckInput.push(input);\n      }\n\n      checkedInputs[data._id] = groupCheckInput;\n    });\n    /* find all checked input and group tham End*/\n\n    /* Find and create a selected group start */\n\n    let selectedGroupRaw = [];\n    let groupKey = item._id + \"_\";\n    Object.keys(checkedInputs).map(inputs => {\n      groupKey += inputs.slice(inputs.length - 6);\n      let selectedCustom = item.customize.find(cus => cus._id == inputs);\n      let varListRow = [];\n      checkedInputs[inputs].map(input => {\n        let tempVar = selectedCustom.variants.find(list => list._id == input.value);\n        groupKey += '_' + tempVar._id.slice(tempVar._id.length - 6);\n        varListRow.push({\n          _id: tempVar._id,\n          title: tempVar.title,\n          price: input.getAttribute('price')\n        });\n      });\n\n      if (varListRow.length != 0) {\n        selectedGroupRaw.push({\n          _id: selectedCustom._id,\n          title: selectedCustom.title,\n          is_multiple: selectedCustom.is_multiple,\n          variants: varListRow\n        });\n      }\n    });\n    selectedGroup[groupKey] = {\n      group: selectedGroupRaw,\n      quantity: selectedGroup[groupKey] ? selectedGroup[groupKey].quantity + quantity : quantity,\n      price: selectedGroup[groupKey] ? selectedGroup[groupKey].price + itemPrice : itemPrice\n    };\n    latestGroup = selectedGroupRaw;\n    /* Find and create a selected group end */\n\n    /* set cart data to a spacific format start*/\n\n    cart.orderItems[item._id] = {\n      menuitem: item,\n      selectedGroup: selectedGroup,\n      latestGroup: latestGroup,\n      itemQuantity: cart.orderItems[item._id] ? cart.orderItems[item._id].itemQuantity + quantity : quantity,\n      itemPrice: cart.orderItems[item._id] ? cart.orderItems[item._id].itemPrice + itemPrice : itemPrice\n    };\n\n    if (!cart.storeId) {\n      cart.storeId = props.storeId;\n    }\n\n    cart.totalQuantity += quantity;\n    cart.totalAmount += itemPrice;\n    localStorage.setItem('cart', JSON.stringify(cart));\n    dispatch(manageCartData());\n    props.toggle();\n    /* set cart data to a spacific format end*/\n  };\n\n  useEffect(() => {\n    if (props.item) {\n      setTempChildData({});\n      let depCustom = props.item.customize.filter(list => list.is_dependent);\n      let depVarObj = {};\n      depCustom.map(data => {\n        let dWithId = data['dependent_with'];\n        let varListRow = [];\n        let dependentCustome = props.item.customize.find(dataCus => dataCus._id == data.dependent_with);\n        let defaultSelectedVarID = dependentCustome.variants.find(defVar => defVar.isDefault == true);\n\n        if (defaultSelectedVarID !== undefined) {\n          data.variants.map(varList => {\n            let price = varList.dependent_price.find(raw => raw.varientId == defaultSelectedVarID._id);\n\n            if (price !== undefined) {\n              varListRow.push({\n                _id: varList._id,\n                title: varList.title,\n                price: price,\n                isDefault: varList.isDefault\n              });\n            }\n          });\n        }\n\n        if (!variant.hasOwnProperty(dWithId)) {\n          depVarObj = {};\n          depVarObj[data['_id']] = varListRow;\n        } else {\n          depVarObj = variant[dWithId];\n          depVarObj[data['_id']] = varListRow;\n        }\n\n        variant[dWithId] = depVarObj;\n      });\n      setVariant(_objectSpread({}, variant));\n    }\n\n    setItem(props.item);\n  }, [props.item]);\n  useEffect(() => {\n    if (item) {\n      calculatePrice(); // console.log('tempChildData',tempChildData);\n\n      if (Object.keys(tempChildData).length != 0) resetChildDep(tempChildData);\n    }\n  }, [variant, quantity]);\n  console.log(\"item\", item);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(Modal, {\n      isOpen: props.isOpen,\n      className: `${styles.ModalCustom} modal-dialog-scrollable`,\n      children: [/*#__PURE__*/_jsxs(ModalHeader, {\n        className: \"modelHeader\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"modelHeaderTitle\",\n          children: item ? item.title : ''\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"bg-close\",\n          onClick: props.toggle\n        })]\n      }), /*#__PURE__*/_jsx(ModalBody, {\n        className: \"modelBody\",\n        children: /*#__PURE__*/_jsxs(Row, {\n          children: [/*#__PURE__*/_jsx(Col, {\n            lg: \"3\",\n            children: /*#__PURE__*/_jsx(\"span\", {\n              className: \"itemImageBox\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: item && (item === null || item === void 0 ? void 0 : item.image),\n                className: \"itemImage\",\n                alt: \"Cart\"\n              })\n            })\n          }), /*#__PURE__*/_jsxs(Col, {\n            lg: \"9\",\n            className: \"itemDetails p-0\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"itemPrice\",\n              children: [\"\\xA3\", item ? Number(item === null || item === void 0 ? void 0 : item.price) : '']\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"itemDescription\",\n              children: item ? item === null || item === void 0 ? void 0 : item.description : ''\n            })]\n          }), /*#__PURE__*/_jsx(Col, {\n            lg: \"12\",\n            className: \"allItemsBody\",\n            children: item && item.customize ? item.customize.map(cusList => cusList.is_dependent ? Object.keys(variant).length != 0 && variant[cusList.dependent_with][cusList._id].length != 0 ? /*#__PURE__*/_jsxs(\"div\", {\n              id: cusList._id,\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: `${styles.titleOptional} modelItemTitle `,\n                children: cusList.title\n              }), /*#__PURE__*/_jsx(Form, {\n                id: `var_${cusList._id}`,\n                className: \"cat\",\n                children: variant[cusList.dependent_with][cusList._id].map(varList => /*#__PURE__*/_jsx(FormGroup, {\n                  style: {\n                    marginBottom: \"0\"\n                  },\n                  children: /*#__PURE__*/_jsxs(Label, {\n                    children: [/*#__PURE__*/_jsx(Input, {\n                      name: cusList._id,\n                      value: varList._id,\n                      price: varList.price.price,\n                      type: cusList.is_multiple ? \"checkbox\" : \"radio\",\n                      className: `${styles.checkInput}`,\n                      onChange: handelChange,\n                      defaultChecked: varList.isDefault ? true : false\n                    }), /*#__PURE__*/_jsxs(\"span\", {\n                      children: [/*#__PURE__*/_jsx(\"p\", {\n                        className: `${cusList.is_multiple ? styles.checkmark : styles.radio}`\n                      }), /*#__PURE__*/_jsxs(\"p\", {\n                        className: `${styles.checktext}`,\n                        style: {\n                          margin: \"0\",\n                          fontWeight: \"700\"\n                        },\n                        children: [varList.title, \" \\xA3\", varList.price.price]\n                      })]\n                    })]\n                  })\n                }, varList._id))\n              })]\n            }, cusList._id) : '' : cusList.variants && cusList.variants.length != 0 ? /*#__PURE__*/_jsxs(\"div\", {\n              id: cusList._id,\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: `${styles.titleOptional} modelItemTitle`,\n                children: cusList.title\n              }), /*#__PURE__*/_jsx(Form, {\n                id: `var_${cusList._id}`,\n                className: \"cat\",\n                children: cusList.variants.map(varList => /*#__PURE__*/_jsx(FormGroup, {\n                  style: {\n                    marginBottom: \"0\"\n                  },\n                  children: /*#__PURE__*/_jsxs(Label, {\n                    children: [/*#__PURE__*/_jsx(Input, {\n                      name: cusList._id,\n                      value: varList._id,\n                      price: varList.price,\n                      type: cusList.is_multiple ? \"checkbox\" : \"radio\",\n                      className: `${styles.checkInput}`,\n                      onChange: handelChange,\n                      defaultChecked: varList.isDefault ? true : false\n                    }), /*#__PURE__*/_jsxs(\"span\", {\n                      children: [/*#__PURE__*/_jsx(\"p\", {\n                        className: `${cusList.is_multiple ? styles.checkmark : styles.radio}`\n                      }), /*#__PURE__*/_jsxs(\"p\", {\n                        className: `${styles.checktext}`,\n                        style: {\n                          margin: \"0\",\n                          fontWeight: \"700\"\n                        },\n                        children: [varList.title, \" \\xA3\", varList.price]\n                      })]\n                    })]\n                  })\n                }, varList._id))\n              })]\n            }, cusList._id) : \"\") : ''\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(ModalFooter, {\n        className: \"modelFooter\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"footerQuantityBtn\",\n          children: /*#__PURE__*/_jsx(QuantityBtn, {\n            defvalue: 1,\n            minValue: 1,\n            getQuantity: getQuantity\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"footerADDtoCartBtn\",\n          role: \"button\",\n          onClick: addItemToCart,\n          children: /*#__PURE__*/_jsxs(\"a\", {\n            className: `${styles.themeBtn}`,\n            children: [\"Add to Cart - \", /*#__PURE__*/_jsxs(\"span\", {\n              children: [\"\\xA3\", itemPrice]\n            })]\n          })\n        })]\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}