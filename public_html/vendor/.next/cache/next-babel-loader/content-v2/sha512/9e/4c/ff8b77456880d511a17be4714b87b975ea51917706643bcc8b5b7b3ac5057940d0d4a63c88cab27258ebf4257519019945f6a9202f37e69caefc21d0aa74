{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"lodash\";\n\nvar AutoPicker = function AutoPicker(props) {\n  var autoComplete = null;\n  var google = null;\n\n  var _useState = useState(''),\n      location = _useState[0],\n      setLocation = _useState[1];\n\n  var _useState2 = useState({\n    loading: true,\n    data: []\n  }),\n      predection = _useState2[0],\n      setPredection = _useState2[1];\n\n  var debounceLoad = useCallback(debounce(function (location) {\n    if (location != '') {\n      autoComplete.getQueryPredictions({\n        input: location\n      }, displaySuggestions);\n    }\n  }, 1000), []);\n\n  var displaySuggestions = function displaySuggestions(predictions, status) {\n    var tempArray = [];\n\n    if (predictions && predictions.length > 0) {\n      predictions.forEach(function (list) {\n        return tempArray.push({\n          place_id: list.place_id,\n          title: list.structured_formatting.main_text,\n          description: list.structured_formatting.secondary_text\n        });\n      });\n    }\n\n    setPredection({\n      loading: false,\n      data: tempArray\n    });\n  };\n\n  var hangelLocationSelect = function hangelLocationSelect(e) {\n    var place_id = e.currentTarget.getAttribute('value');\n    google = window.google;\n    var geoCode = new google.maps.Geocoder();\n    geoCode.geocode({\n      placeId: place_id\n    }).then(function (_ref) {\n      var results = _ref.results;\n\n      if (results[0]) {\n        props.getLocation(results[0]);\n        setPredection({\n          loading: true,\n          data: []\n        });\n      } else {\n        console.log(\"No results found\");\n      }\n    })[\"catch\"](function (e) {\n      return console.log(\"Geocoder failed due to: \" + e);\n    });\n  };\n\n  var closeModel = function closeModel() {\n    props.toggleMap();\n  };\n\n  useEffect(function () {\n    google = window.google;\n    autoComplete = new google.maps.places.AutocompleteService();\n  }, []);\n  useEffect(function () {\n    setLocation(props.location.address);\n  }, [props.location]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"form-group map-form-group\",\n      children: [/*#__PURE__*/_jsx(\"label\", {\n        children: \"Search Location\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        role: \"button\",\n        onClick: closeModel,\n        className: \"close-icon\",\n        children: \"\\xD7\"\n      }), /*#__PURE__*/_jsx(\"i\", {\n        className: \"ni ni-pin-3\"\n      }), /*#__PURE__*/_jsx(\"input\", {\n        className: \" form-control\" // ref={autoCupRef}\n        ,\n        onChange: function onChange(e) {\n          setLocation(e.target.value);\n          debounceLoad(e.target.value);\n        },\n        value: location\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"locationSuggestion \".concat(predection.loading ? \"d-none\" : \"d-block\"),\n        children: predection.data.length == 0 ? /*#__PURE__*/_jsx(\"span\", {\n          className: \"predectionList\",\n          children: \"No data found\"\n        }) : predection.data.map(function (list) {\n          return /*#__PURE__*/_jsxs(\"span\", {\n            className: \"predectionList\",\n            onClick: hangelLocationSelect,\n            value: list.place_id,\n            children: [/*#__PURE__*/_jsx(\"h4\", {\n              children: list.title\n            }), list.description]\n          }, list.place_id);\n        })\n      })]\n    })\n  });\n};\n\nexport default AutoPicker;","map":null,"metadata":{},"sourceType":"module"}