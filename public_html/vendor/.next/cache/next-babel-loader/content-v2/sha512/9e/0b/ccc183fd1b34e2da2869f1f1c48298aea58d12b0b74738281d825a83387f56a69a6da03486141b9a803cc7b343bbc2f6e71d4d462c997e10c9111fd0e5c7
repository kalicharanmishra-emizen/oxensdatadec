{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport Image from 'next/image';\nimport minus from '../public/images/minus-icon.svg';\nimport pluse from '../public/images/pluse-icon.svg';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from 'lodash';\nimport { manageCartData } from \"../reducers/mainSlice\";\nimport \"../styles/store-detail.css\";\nexport default function QuantityBtn(props) {\n  var cartData = useSelector(function (state) {\n    return state.mainSlice.cart;\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState(0),\n      countValue = _useState[0],\n      setCountValue = _useState[1];\n\n  var item = cartData.orderItems[props.itemId];\n  useEffect(function () {\n    if (props) {\n      setCountValue(props.defvalue);\n    }\n  }, [props.defvalue]);\n\n  var getCustomeTypeToString = function getCustomeTypeToString(data) {\n    var returnString = '';\n    data.map(function (cus) {\n      returnString += cus.title + ' | ';\n      cus.variants.map(function (vare) {\n        returnString += vare.title + ', ';\n      });\n    });\n    return returnString;\n  };\n\n  var incriment = function incriment() {\n    if ('askCus' in props && props.askCus) {\n      Swal.fire({\n        title: 'Repeat last used customisation',\n        html: \"<h4>\".concat(item.menuitem.title, \"</h4><p>\").concat(getCustomeTypeToString(item.latestGroup), \"</p>\"),\n        showCancelButton: false,\n        showDenyButton: true,\n        denyButtonText: 'Repeat Last',\n        confirmButtonText: 'Add New',\n        scrollbarPadding: false,\n        customClass: {\n          actions: 'cartConfirmAction',\n          confirmButton: 'cartAddNewBtn',\n          denyButton: 'cartRepeatLastBtn',\n          htmlContainer: 'cartHtmlContainer',\n          title: \"cartConfirnHeader\"\n        }\n      }).then(function (result) {\n        /* Confirm button is use for add new Varient's */\n        if (result.isConfirmed) {\n          props.getQuantity({\n            newPopUp: true,\n            itemId: props.itemId\n          });\n        }\n        /* Deny button is use for repeat last Varient */\n\n\n        if (result.isDenied) {\n          var _cartData = JSON.parse(localStorage.getItem('cart'));\n\n          var selectedGroupkey = Object.keys(_cartData.orderItems[props.itemId].selectedGroup).find(function (tempList) {\n            return _.isEqual(_cartData.orderItems[props.itemId].selectedGroup[tempList].group, _cartData.orderItems[props.itemId].latestGroup);\n          });\n          var lastGroupPrice = Number(_cartData.orderItems[props.itemId].menuitem.price);\n\n          _cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].group.map(function (itPrice) {\n            itPrice.variants.map(function (temp) {\n              lastGroupPrice += Number(temp.price);\n            });\n          });\n\n          _cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity += 1;\n          _cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].price += lastGroupPrice;\n          _cartData.orderItems[props.itemId].itemQuantity += 1;\n          _cartData.orderItems[props.itemId].itemPrice += lastGroupPrice;\n          _cartData.totalQuantity += 1;\n          _cartData.totalAmount += lastGroupPrice;\n          localStorage.setItem('cart', JSON.stringify(_cartData));\n          dispatch(manageCartData());\n        }\n      });\n    } else if ('grpCus' in props && props.grpCus) {\n      var selectedGroupkey = props.groupId;\n\n      var _cartData2 = JSON.parse(localStorage.getItem('cart'));\n\n      var lastGroupPrice = Number(_cartData2.orderItems[props.itemId].menuitem.price);\n\n      _cartData2.orderItems[props.itemId].selectedGroup[selectedGroupkey].group.map(function (itPrice) {\n        itPrice.variants.map(function (temp) {\n          lastGroupPrice += Number(temp.price);\n        });\n      });\n\n      _cartData2.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity += 1;\n      _cartData2.orderItems[props.itemId].selectedGroup[selectedGroupkey].price += lastGroupPrice;\n      _cartData2.orderItems[props.itemId].itemQuantity += 1;\n      _cartData2.orderItems[props.itemId].itemPrice += lastGroupPrice;\n      _cartData2.totalQuantity += 1;\n      _cartData2.totalAmount += lastGroupPrice;\n      localStorage.setItem('cart', JSON.stringify(_cartData2));\n      dispatch(manageCartData());\n    } else {\n      if (countValue < 99) {\n        setCountValue(countValue + 1);\n      }\n    }\n  };\n\n  var decriment = function decriment() {\n    if ('askCus' in props && props.askCus) {\n      if (Object.keys(item.selectedGroup).length == 1) {\n        var selectedGroupkey = Object.keys(item.selectedGroup)[0];\n\n        var _cartData3 = JSON.parse(localStorage.getItem('cart'));\n\n        var lastGroupPrice = Number(_cartData3.orderItems[props.itemId].menuitem.price);\n\n        _cartData3.orderItems[props.itemId].selectedGroup[selectedGroupkey].group.map(function (itPrice) {\n          itPrice.variants.map(function (temp) {\n            lastGroupPrice += Number(temp.price);\n          });\n        });\n\n        _cartData3.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity -= 1;\n        _cartData3.orderItems[props.itemId].selectedGroup[selectedGroupkey].price -= lastGroupPrice;\n        _cartData3.orderItems[props.itemId].itemQuantity -= 1;\n        _cartData3.orderItems[props.itemId].itemPrice -= lastGroupPrice;\n        /* remove Item Group if group quantity hit 0 */\n\n        if (_cartData3.orderItems[props.itemId].selectedGroup[selectedGroupkey].price < 0 || _cartData3.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity == 0) {\n          delete _cartData3.orderItems[props.itemId].selectedGroup[selectedGroupkey];\n        }\n        /* remove Item if item quantity hit 0 */\n\n\n        if (_cartData3.orderItems[props.itemId].itemPrice < 0 || _cartData3.orderItems[props.itemId].itemQuantity == 0) {\n          delete _cartData3.orderItems[props.itemId];\n        }\n\n        _cartData3.totalQuantity -= 1;\n        _cartData3.totalAmount -= lastGroupPrice;\n\n        if (_cartData3.totalAmount < 0) {\n          _cartData3.totalAmount = 0;\n        }\n\n        if (_cartData3.totalQuantity == 0) {\n          _cartData3.storeId = null;\n        }\n\n        localStorage.setItem('cart', JSON.stringify(_cartData3));\n        dispatch(manageCartData());\n      } else {\n        props.getQuantity({\n          removePopUp: true,\n          itemId: props.itemId\n        });\n      }\n    } else if ('grpCus' in props && props.grpCus) {\n      var _selectedGroupkey = props.groupId;\n\n      var _cartData4 = JSON.parse(localStorage.getItem('cart'));\n\n      var _lastGroupPrice = Number(_cartData4.orderItems[props.itemId].menuitem.price);\n\n      _cartData4.orderItems[props.itemId].selectedGroup[_selectedGroupkey].group.map(function (itPrice) {\n        itPrice.variants.map(function (temp) {\n          _lastGroupPrice += Number(temp.price);\n        });\n      });\n\n      _cartData4.orderItems[props.itemId].selectedGroup[_selectedGroupkey].quantity -= 1;\n      _cartData4.orderItems[props.itemId].selectedGroup[_selectedGroupkey].price -= _lastGroupPrice;\n      _cartData4.orderItems[props.itemId].itemQuantity -= 1;\n      _cartData4.orderItems[props.itemId].itemPrice -= _lastGroupPrice;\n      /* remove Item Group if group quantity hit 0 */\n\n      if (_cartData4.orderItems[props.itemId].selectedGroup[_selectedGroupkey].price < 0 || _cartData4.orderItems[props.itemId].selectedGroup[_selectedGroupkey].quantity == 0) {\n        delete _cartData4.orderItems[props.itemId].selectedGroup[_selectedGroupkey];\n      }\n      /* remove Item if item quantity hit 0 */\n\n\n      if (_cartData4.orderItems[props.itemId].itemPrice < 0 || _cartData4.orderItems[props.itemId].itemQuantity == 0) {\n        delete _cartData4.orderItems[props.itemId];\n      }\n\n      _cartData4.totalQuantity -= 1;\n      _cartData4.totalAmount -= _lastGroupPrice;\n\n      if (_cartData4.totalAmount < 0) {\n        _cartData4.totalAmount = 0;\n      }\n\n      if (_cartData4.totalQuantity == 0) {\n        _cartData4.storeId = null;\n      }\n\n      localStorage.setItem('cart', JSON.stringify(_cartData4));\n      dispatch(manageCartData());\n    } else {\n      var minValue = 0;\n\n      if ('minValue' in props) {\n        minValue = props.minValue;\n      }\n\n      if (countValue > minValue) {\n        setCountValue(countValue - 1);\n      }\n    }\n  };\n\n  useEffect(function () {\n    props.getQuantity(countValue);\n  }, [countValue]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"QuantityBlock\",\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: \"minus\",\n        onClick: decriment,\n        children: \"-\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"countAll\",\n        children: countValue\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"pluse\",\n        onClick: incriment,\n        children: \"+\"\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}