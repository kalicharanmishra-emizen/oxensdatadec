{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport Image from 'next/image';\nimport minus from '../public/images/minus-icon.svg';\nimport pluse from '../public/images/pluse-icon.svg';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from 'lodash';\nimport { manageCartData } from \"../reducers/mainSlice\";\nimport \"../styles/store-detail.css\";\nexport default function QuantityBtn(props) {\n  const cartData = useSelector(state => state.mainSlice.cart);\n  const dispatch = useDispatch();\n  const {\n    0: countValue,\n    1: setCountValue\n  } = useState(0);\n  let item = cartData.orderItems[props.itemId];\n  useEffect(() => {\n    if (props) {\n      setCountValue(props.defvalue);\n    }\n  }, [props.defvalue]);\n\n  const getCustomeTypeToString = data => {\n    let returnString = '';\n    data.map(cus => {\n      returnString += cus.title + ' | ';\n      cus.variants.map(vare => {\n        returnString += vare.title + ', ';\n      });\n    });\n    return returnString;\n  };\n\n  const incriment = () => {\n    if ('askCus' in props && props.askCus) {\n      Swal.fire({\n        title: 'Repeat last used customisation',\n        html: `<h4>${item.menuitem.title}</h4><p>${getCustomeTypeToString(item.latestGroup)}</p>`,\n        showCancelButton: false,\n        showDenyButton: true,\n        denyButtonText: 'Repeat Last',\n        confirmButtonText: 'Add New',\n        scrollbarPadding: false,\n        customClass: {\n          actions: 'cartConfirmAction',\n          confirmButton: 'cartAddNewBtn',\n          denyButton: 'cartRepeatLastBtn',\n          htmlContainer: 'cartHtmlContainer',\n          title: \"cartConfirnHeader\"\n        }\n      }).then(result => {\n        /* Confirm button is use for add new Varient's */\n        if (result.isConfirmed) {\n          props.getQuantity({\n            newPopUp: true,\n            itemId: props.itemId\n          });\n        }\n        /* Deny button is use for repeat last Varient */\n\n\n        if (result.isDenied) {\n          let cartData = JSON.parse(localStorage.getItem('cart'));\n          let selectedGroupkey = Object.keys(cartData.orderItems[props.itemId].selectedGroup).find(tempList => {\n            return _.isEqual(cartData.orderItems[props.itemId].selectedGroup[tempList].group, cartData.orderItems[props.itemId].latestGroup);\n          });\n          let lastGroupPrice = Number(cartData.orderItems[props.itemId].menuitem.price);\n          cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].group.map(itPrice => {\n            itPrice.variants.map(temp => {\n              lastGroupPrice += Number(temp.price);\n            });\n          });\n          cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity += 1;\n          cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].price += lastGroupPrice;\n          cartData.orderItems[props.itemId].itemQuantity += 1;\n          cartData.orderItems[props.itemId].itemPrice += lastGroupPrice;\n          cartData.totalQuantity += 1;\n          cartData.totalAmount += lastGroupPrice;\n          localStorage.setItem('cart', JSON.stringify(cartData));\n          dispatch(manageCartData());\n        }\n      });\n    } else if ('grpCus' in props && props.grpCus) {\n      let selectedGroupkey = props.groupId;\n      let cartData = JSON.parse(localStorage.getItem('cart'));\n      let lastGroupPrice = Number(cartData.orderItems[props.itemId].menuitem.price);\n      cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].group.map(itPrice => {\n        itPrice.variants.map(temp => {\n          lastGroupPrice += Number(temp.price);\n        });\n      });\n      cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity += 1;\n      cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].price += lastGroupPrice;\n      cartData.orderItems[props.itemId].itemQuantity += 1;\n      cartData.orderItems[props.itemId].itemPrice += lastGroupPrice;\n      cartData.totalQuantity += 1;\n      cartData.totalAmount += lastGroupPrice;\n      localStorage.setItem('cart', JSON.stringify(cartData));\n      dispatch(manageCartData());\n    } else {\n      if (countValue < 99) {\n        setCountValue(countValue + 1);\n      }\n    }\n  };\n\n  const decriment = () => {\n    if ('askCus' in props && props.askCus) {\n      if (Object.keys(item.selectedGroup).length == 1) {\n        let selectedGroupkey = Object.keys(item.selectedGroup)[0];\n        let cartData = JSON.parse(localStorage.getItem('cart'));\n        let lastGroupPrice = Number(cartData.orderItems[props.itemId].menuitem.price);\n        cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].group.map(itPrice => {\n          itPrice.variants.map(temp => {\n            lastGroupPrice += Number(temp.price);\n          });\n        });\n        cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity -= 1;\n        cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].price -= lastGroupPrice;\n        cartData.orderItems[props.itemId].itemQuantity -= 1;\n        cartData.orderItems[props.itemId].itemPrice -= lastGroupPrice;\n        /* remove Item Group if group quantity hit 0 */\n\n        if (cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].price < 0 || cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity == 0) {\n          delete cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey];\n        }\n        /* remove Item if item quantity hit 0 */\n\n\n        if (cartData.orderItems[props.itemId].itemPrice < 0 || cartData.orderItems[props.itemId].itemQuantity == 0) {\n          delete cartData.orderItems[props.itemId];\n        }\n\n        cartData.totalQuantity -= 1;\n        cartData.totalAmount -= lastGroupPrice;\n\n        if (cartData.totalAmount < 0) {\n          cartData.totalAmount = 0;\n        }\n\n        if (cartData.totalQuantity == 0) {\n          cartData.storeId = null;\n        }\n\n        localStorage.setItem('cart', JSON.stringify(cartData));\n        dispatch(manageCartData());\n      } else {\n        props.getQuantity({\n          removePopUp: true,\n          itemId: props.itemId\n        });\n      }\n    } else if ('grpCus' in props && props.grpCus) {\n      let selectedGroupkey = props.groupId;\n      let cartData = JSON.parse(localStorage.getItem('cart'));\n      let lastGroupPrice = Number(cartData.orderItems[props.itemId].menuitem.price);\n      cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].group.map(itPrice => {\n        itPrice.variants.map(temp => {\n          lastGroupPrice += Number(temp.price);\n        });\n      });\n      cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity -= 1;\n      cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].price -= lastGroupPrice;\n      cartData.orderItems[props.itemId].itemQuantity -= 1;\n      cartData.orderItems[props.itemId].itemPrice -= lastGroupPrice;\n      /* remove Item Group if group quantity hit 0 */\n\n      if (cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].price < 0 || cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey].quantity == 0) {\n        delete cartData.orderItems[props.itemId].selectedGroup[selectedGroupkey];\n      }\n      /* remove Item if item quantity hit 0 */\n\n\n      if (cartData.orderItems[props.itemId].itemPrice < 0 || cartData.orderItems[props.itemId].itemQuantity == 0) {\n        delete cartData.orderItems[props.itemId];\n      }\n\n      cartData.totalQuantity -= 1;\n      cartData.totalAmount -= lastGroupPrice;\n\n      if (cartData.totalAmount < 0) {\n        cartData.totalAmount = 0;\n      }\n\n      if (cartData.totalQuantity == 0) {\n        cartData.storeId = null;\n      }\n\n      localStorage.setItem('cart', JSON.stringify(cartData));\n      dispatch(manageCartData());\n    } else {\n      let minValue = 0;\n\n      if ('minValue' in props) {\n        minValue = props.minValue;\n      }\n\n      if (countValue > minValue) {\n        setCountValue(countValue - 1);\n      }\n    }\n  };\n\n  useEffect(() => {\n    props.getQuantity(countValue);\n  }, [countValue]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: `QuantityBlock`,\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: `minus`,\n        onClick: decriment,\n        children: \"-\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: `countAll`,\n        children: countValue\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: `pluse`,\n        onClick: incriment,\n        children: \"+\"\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}