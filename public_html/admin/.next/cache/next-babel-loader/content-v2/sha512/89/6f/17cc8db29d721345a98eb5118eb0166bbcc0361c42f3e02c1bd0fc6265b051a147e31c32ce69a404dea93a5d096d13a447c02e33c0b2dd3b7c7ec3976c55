{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { callApi } from '../Helper/helper';\nimport { apiFail, apiSuccess } from 'reducers/mainSlice';\nconst vendorSlice = createSlice({\n  name: \"vendor\",\n  initialState: {\n    vendorList: null,\n    vendorEdit: null\n  },\n  reducers: {\n    listing: (state, action) => {\n      state.vendorList = action.payload;\n    },\n    edit: (state, action) => {\n      state.vendorEdit = action.payload.data;\n    },\n    unSetEdit: (state, action) => {\n      state.vendorEdit = null;\n    }\n  }\n});\nexport default vendorSlice.reducer;\nconst {\n  listing,\n  edit,\n  unSetEdit\n} = vendorSlice.actions;\nexport const getList = (page = 1) => async dispatch => {\n  try {\n    const res = await callApi('post', `/vendor/list?page=${page}`, {});\n    dispatch(listing(res.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const getVendor = userId => async dispatch => {\n  try {\n    const res = await callApi('post', '/vendor/edit', {\n      userId\n    });\n    dispatch(edit(res.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const createVendor = value => async dispatch => {\n  try {\n    const res = await callApi('post', '/vendor/create', value);\n    dispatch(apiSuccess(res.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const updateVendor = value => async dispatch => {\n  try {\n    const res = await callApi('post', '/vendor/update', value);\n    dispatch(apiSuccess(res.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const unSetEditVendor = () => async dispatch => {\n  dispatch(unSetEdit());\n};","map":null,"metadata":{},"sourceType":"module"}