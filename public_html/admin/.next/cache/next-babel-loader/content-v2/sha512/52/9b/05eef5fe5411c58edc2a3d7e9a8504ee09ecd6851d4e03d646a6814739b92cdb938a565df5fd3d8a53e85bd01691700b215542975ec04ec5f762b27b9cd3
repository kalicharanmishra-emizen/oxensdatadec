{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Admin from 'layouts/Admin';\nimport UserHeader from \"components/Headers/UserHeader\";\nimport { Button, Card, CardBody, CardHeader, Col, Container, Form, FormGroup, Row } from \"reactstrap\";\nimport { useEffect, useState } from 'react';\nimport validator from 'validator';\nimport FormInputCom from \"components/Form/FormInputCom\";\nimport FormCKEditor from '../../components/Form/FormCKEditor';\nimport { getDetail, updateCms } from '../../reducers/cmsSlice';\nimport { unSetApiFail, unSetApiSucc } from \"reducers/mainSlice\";\nimport { useDispatch } from 'react-redux';\nimport { toast } from \"react-toastify\";\nimport { useRouter } from 'next/router';\nimport { useSelector } from 'react-redux';\nimport nprogress from 'nprogress';\n\nfunction Cms() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const detail = useSelector(state => state.cmsSlice.detail);\n  const apiError = useSelector(state => state.mainSlice.failed);\n  const apiSuccess = useSelector(state => state.mainSlice.success);\n  const {\n    0: alert,\n    1: setAlert\n  } = useState({\n    status: false,\n    message: '',\n    type: ''\n  });\n  const {\n    edit\n  } = router.query;\n  const {\n    0: submitValidate,\n    1: setsubmitValidate\n  } = useState(false);\n  const {\n    0: confirmValidate,\n    1: setConfirmValidate\n  } = useState({});\n  const {\n    0: confirmValidateStatus,\n    1: setConfirmValidateStatus\n  } = useState(false);\n  /* form submit handel  start */\n\n  const {\n    0: formSubmit,\n    1: setFormSubmit\n  } = useState({\n    title: \"\",\n    slug: '',\n    content: ''\n  });\n\n  const getValue = data => {\n    formSubmit[data.key] = data.data;\n    confirmValidate[data.key] = data.error;\n    setConfirmValidate(_objectSpread({}, confirmValidate));\n    setFormSubmit(_objectSpread({}, formSubmit));\n    setsubmitValidate(false);\n  };\n\n  const formSubmitHandal = async e => {\n    e.preventDefault();\n    setsubmitValidate(true);\n\n    if (confirmValidateStatus) {\n      // console.log('final data',formSubmit);\n      nprogress.start();\n      dispatch(updateCms(formSubmit));\n    }\n  };\n\n  useEffect(() => {\n    let something = true;\n\n    if (Object.keys(confirmValidate).length == 3) {\n      for (const key in confirmValidate) {\n        if (!!confirmValidate[key]) {\n          something = false;\n          setConfirmValidateStatus(false);\n        }\n      }\n\n      if (something) {\n        setConfirmValidateStatus(true);\n      }\n    }\n  }, [confirmValidate]);\n  /* form submit handel  end */\n\n  if (alert.status) {\n    toast(alert.message, {\n      type: alert.type\n    });\n  }\n\n  useEffect(() => {\n    if (apiSuccess) {\n      if (apiSuccess.statusCode >= 200 && apiSuccess.statusCode < 300) {\n        setAlert({\n          status: true,\n          message: apiSuccess.message,\n          type: 'success'\n        });\n        nprogress.done();\n        dispatch(unSetApiSucc());\n        router.push('/cms');\n        setTimeout(() => {\n          setAlert({\n            status: false,\n            message: '',\n            type: ''\n          }); //   dispatch(unSetApiSucc())\n        }, 3000);\n      }\n\n      if (apiError) {\n        if (apiError.statusCode >= 400 && apiError.statusCode <= 500) {\n          setAlert({\n            status: true,\n            message: apiError.message,\n            type: 'error'\n          });\n          dispatch(unSetApiFail());\n          nprogress.done();\n          setTimeout(() => {\n            setAlert({\n              status: false,\n              message: '',\n              type: ''\n            });\n          }, 3000);\n        }\n      }\n    }\n  }, [apiSuccess, apiError]);\n  useEffect(() => {\n    if (edit != undefined) {\n      dispatch(getDetail({\n        slug: edit\n      }));\n    }\n  }, [edit]);\n  useEffect(() => {\n    if (detail) {\n      formSubmit.title = detail.title;\n      formSubmit.slug = detail.slug;\n      formSubmit.content = detail.content;\n      setFormSubmit(_objectSpread({}, formSubmit));\n    }\n  }, [detail]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(UserHeader, {}), /*#__PURE__*/_jsx(Container, {\n      className: \"mt--7\",\n      fluid: true,\n      children: /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsx(Col, {\n          className: \"order-xl-1\",\n          xl: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"bg-secondary shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-white border-0\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(Col, {\n                  xs: \"8\",\n                  children: /*#__PURE__*/_jsx(\"h3\", {\n                    className: \"mb-0\",\n                    children: \"Create Category\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsx(Form, {\n                onSubmit: formSubmitHandal,\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"pl-lg-4\",\n                  children: [/*#__PURE__*/_jsxs(Row, {\n                    className: \"align-items-center\",\n                    children: [/*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          children: \"Title\"\n                        }), /*#__PURE__*/_jsx(FormInputCom, {\n                          type: \"text\",\n                          name: \"title\",\n                          placeholder: \"Enter Title\",\n                          optionData: [],\n                          validator: [{\n                            property: validator.isEmpty,\n                            message: \"Title required\",\n                            isNot: false\n                          }],\n                          getValue: getValue,\n                          defValue: formSubmit.title,\n                          submitValidate: submitValidate\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          children: \"Slug\"\n                        }), /*#__PURE__*/_jsx(FormInputCom, {\n                          type: \"text\",\n                          name: \"slug\",\n                          placeholder: \"Enter Slug\",\n                          optionData: [],\n                          validator: [{\n                            property: validator.isEmpty,\n                            message: \"Slug required\",\n                            isNot: false\n                          }],\n                          isDefault: true,\n                          getValue: getValue,\n                          defValue: formSubmit.slug,\n                          submitValidate: submitValidate\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"12\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          children: \"Content\"\n                        }), /*#__PURE__*/_jsx(FormCKEditor, {\n                          name: \"content\",\n                          validator: {\n                            required: true,\n                            message: 'Content is requird'\n                          },\n                          defValue: formSubmit.content,\n                          placeholder: \"Enter Slug\",\n                          getValue: getValue,\n                          submitValidate: submitValidate\n                        })]\n                      })\n                    })]\n                  }), /*#__PURE__*/_jsx(Row, {\n                    children: /*#__PURE__*/_jsxs(Col, {\n                      lg: \"12\",\n                      children: [/*#__PURE__*/_jsx(Button, {\n                        className: \"float-right\",\n                        color: \"primary\",\n                        type: \"submit\",\n                        children: \"Save\"\n                      }), /*#__PURE__*/_jsx(Button, {\n                        className: \"float-right mr-2\",\n                        color: \"secondary\",\n                        type: \"button\",\n                        onClick: e => {\n                          e.preventDefault();\n                          router.back();\n                        },\n                        children: \"Back\"\n                      })]\n                    })\n                  })]\n                })\n              })\n            })]\n          })\n        })\n      })\n    })]\n  });\n}\n\nCms.layout = Admin;\nexport default Cms;","map":null,"metadata":{},"sourceType":"module"}