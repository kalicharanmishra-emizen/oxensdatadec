{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/domains/oxens.ezxdemo.com/public_html/admin/components/Map/AutoPicker.js\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"lodash\";\n\nconst AutoPicker = props => {\n  let autoComplete = null;\n  let google = null;\n  const {\n    0: location,\n    1: setLocation\n  } = useState('');\n  const {\n    0: predection,\n    1: setPredection\n  } = useState({\n    loading: true,\n    data: []\n  });\n  useEffect(() => {\n    setLocation(props.location.address);\n  }, [props.location]);\n  const debounceLoad = useCallback(debounce(location => {\n    if (location != '') {\n      autoComplete.getQueryPredictions({\n        input: location\n      }, displaySuggestions);\n    }\n  }, 1000), []);\n  useEffect(() => {\n    google = window.google;\n    autoComplete = new google.maps.places.AutocompleteService();\n  }, []);\n\n  const displaySuggestions = (predictions, status) => {\n    let tempArray = [];\n\n    if (predictions && predictions.length > 0) {\n      predictions.forEach(list => tempArray.push({\n        place_id: list.place_id,\n        title: list.structured_formatting.main_text,\n        description: list.structured_formatting.secondary_text\n      }));\n    }\n\n    setPredection({\n      loading: false,\n      data: tempArray\n    });\n  };\n\n  const hangelLocationSelect = e => {\n    let place_id = e.currentTarget.getAttribute('value');\n    google = window.google;\n    const geoCode = new google.maps.Geocoder();\n    geoCode.geocode({\n      placeId: place_id\n    }).then(({\n      results\n    }) => {\n      if (results[0]) {\n        props.getLocation(results[0]);\n        setPredection({\n          loading: true,\n          data: []\n        });\n      } else {\n        console.log(\"No results found\");\n      }\n    }).catch(e => console.log(\"Geocoder failed due to: \" + e));\n  };\n\n  const closeModel = () => {\n    props.toggleMap();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group map-form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Search Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"button\",\n        onClick: closeModel,\n        className: \"close-icon\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"ni ni-pin-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \" form-control\" // ref={autoCupRef}\n        ,\n        onChange: e => {\n          setLocation(e.target.value);\n          debounceLoad(e.target.value);\n        },\n        value: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `locationSuggestion ${predection.loading ? \"d-none\" : \"d-block\"}`,\n        children: predection.data.length == 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"predectionList\",\n          children: \"No data found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this) : predection.data.map(list => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"predectionList\",\n          onClick: hangelLocationSelect,\n          value: list.place_id,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: list.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), list.description]\n        }, list.place_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\nexport default AutoPicker;","map":{"version":3,"sources":["/var/www/domains/oxens.ezxdemo.com/public_html/admin/components/Map/AutoPicker.js"],"names":["useCallback","useEffect","useRef","useState","debounce","AutoPicker","props","autoComplete","google","location","setLocation","predection","setPredection","loading","data","address","debounceLoad","getQueryPredictions","input","displaySuggestions","window","maps","places","AutocompleteService","predictions","status","tempArray","length","forEach","list","push","place_id","title","structured_formatting","main_text","description","secondary_text","hangelLocationSelect","e","currentTarget","getAttribute","geoCode","Geocoder","geocode","placeId","then","results","getLocation","console","log","catch","closeModel","toggleMap","target","value","map"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"lodash\";\nconst AutoPicker = (props) => {\n    let autoComplete = null\n    let  google = null\n    const [location,setLocation] = useState('')\n    const [predection,setPredection] = useState({\n        loading:true,\n        data:[]\n    })\n    useEffect(()=>{\n        setLocation(props.location.address)\n    },[props.location])\n    const debounceLoad = useCallback(\n        debounce(\n            (location)=>{\n                if (location!='') {                    \n                    autoComplete.getQueryPredictions({ input: location }, displaySuggestions);\n                }\n            }\n            , 1000)\n        , []\n    );\n    useEffect(() => {\n        google = window.google;\n        autoComplete = new google.maps.places.AutocompleteService();\n    }, []);\n    const displaySuggestions = (predictions, status) =>{\n        let tempArray=[]\n        if (predictions && predictions.length > 0 ) {\n            predictions.forEach(list=>tempArray.push({\n                place_id:list.place_id,\n                title:list.structured_formatting.main_text,\n                description:list.structured_formatting.secondary_text\n            }))\n        }\n        setPredection({\n            loading:false,\n            data:tempArray\n        })     \n    }\n    const hangelLocationSelect = (e)=>{\n        let place_id = e.currentTarget.getAttribute('value')\n        google = window.google;\n        const geoCode = new google.maps.Geocoder()\n        geoCode.geocode({ placeId: place_id }).then(({results}) => {\n            if (results[0]) {\n              props.getLocation(results[0])\n              setPredection({\n                loading:true,\n                data:[]\n            })\n            } else {\n                console.log(\"No results found\");\n            }\n          })\n          .catch((e) => console.log(\"Geocoder failed due to: \" + e));\n    }\n    const closeModel = () =>{\n        props.toggleMap()\n    }\n    return (\n        <>\n        {}\n            <div className=\"form-group map-form-group\">\n            <label>Search Location</label>\n            <span role=\"button\" onClick={closeModel} className=\"close-icon\">&times;</span>\n            <i className=\"ni ni-pin-3\"></i>\n            <input\n                className=\" form-control\"\n                // ref={autoCupRef}\n                onChange={(e)=>{\n                        setLocation(e.target.value)\n                        debounceLoad(e.target.value)\n                    }\n                }\n                value={location}\n            />\n            <div className={`locationSuggestion ${predection.loading?\"d-none\":\"d-block\"}`}>\n                {\n                    predection.data.length==0?\n                        <span className=\"predectionList\">No data found</span>\n                    :predection.data.map(list=>(\n                        <span className=\"predectionList\" onClick={hangelLocationSelect} key={list.place_id} value={list.place_id}> \n                            <h4>{list.title}</h4>\n                            {list.description}\n                        </span>\n                    ))\n                }\n            </div>\n            </div>\n        </>\n    );\n};\nexport default AutoPicker\n"]},"metadata":{},"sourceType":"module"}