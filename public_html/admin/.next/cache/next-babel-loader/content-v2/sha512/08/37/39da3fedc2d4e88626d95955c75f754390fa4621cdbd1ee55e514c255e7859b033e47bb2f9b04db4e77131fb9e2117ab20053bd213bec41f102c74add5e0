{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { callApi } from '../Helper/helper';\nimport { apiFail, apiSuccess } from 'reducers/mainSlice';\nconst driverSlice = createSlice({\n  name: \"Driver\",\n  initialState: {\n    driverList: null,\n    driverDetail: {\n      isLoading: true,\n      data: {}\n    },\n    driverIncome: null,\n    driverJob: null\n  },\n  reducers: {\n    listing: (state, action) => {\n      state.driverList = action.payload;\n    },\n    setDriverDetail: (state, action) => {\n      state.driverDetail = {\n        isLoading: false,\n        data: action.payload\n      };\n    },\n    unSetDriverDetail: (state, action) => {\n      state.driverDetail = {\n        isLoading: true,\n        data: {}\n      };\n    },\n    setDriverIncome: (state, action) => {\n      state.driverIncome = action.payload;\n    },\n    unSetDriverIncome: (state, action) => {\n      state.driverIncome = null;\n    },\n    setDriverJobs: (state, action) => {\n      state.driverJob = action.payload;\n    },\n    unSetDriverJobs: (state, action) => {\n      state.driverJob = null;\n    }\n  }\n});\nexport default driverSlice.reducer;\nconst {\n  listing,\n  setDriverDetail,\n  unSetDriverDetail,\n  setDriverIncome,\n  unSetDriverIncome,\n  setDriverJobs,\n  unSetDriverJobs\n} = driverSlice.actions;\nexport const getList = (page = 1) => async dispatch => {\n  try {\n    const res = await callApi('post', `/driver/list?page=${page}`, {});\n    dispatch(unSetDriverDetail());\n    dispatch(listing(res.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const getDetail = value => async dispatch => {\n  try {\n    const res = await callApi('post', `/driver/detail`, value);\n    dispatch(setDriverDetail(res.data.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const getDriverIncome = (value, filter) => async dispatch => {\n  try {\n    let tempVal = Object.assign({}, value, filter);\n    const res = await callApi('post', `/driver/driverIncome`, tempVal);\n    dispatch(unSetDriverJobs());\n    dispatch(setDriverIncome(res.data.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};\nexport const getDriverJobs = (value, filter) => async dispatch => {\n  try {\n    let tempVal = Object.assign({}, value, filter);\n    const res = await callApi('post', `/driver/driverJobs`, tempVal);\n    dispatch(unSetDriverIncome());\n    dispatch(setDriverJobs(res.data.data));\n  } catch (e) {\n    dispatch(apiFail(e));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}