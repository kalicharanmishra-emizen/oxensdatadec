{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nexport default function FromInputSelect(props) {\n  const {\n    0: formData,\n    1: setFormData\n  } = useState('');\n  const {\n    0: validation,\n    1: setValidation\n  } = useState(''); // const [submitValidate, setsubmitValidate] = useState(false)\n\n  const {\n    0: defaultOption,\n    1: setDefaultOption\n  } = useState(null);\n  let isDefault = props.isDefault;\n  useEffect(() => {\n    if (typeof props.defValue === 'string') {\n      setFormData(props.defValue);\n      setDefaultOption(props.options.find(data => data.value === props.defValue));\n    } else {\n      let optiondata = [];\n      props.defValue.map(data => {\n        optiondata.push(data.value);\n      });\n      setFormData(optiondata);\n      setDefaultOption(props.defValue);\n    }\n\n    if (props.validation.required) {\n      if (props.defValue != '' && props.defValue != null && props.defValue != 'empty' && props.defValue.length != undefined && props.defValue.length > 0) {\n        setValidation(null);\n      }\n    } else {\n      setValidation(null);\n    }\n  }, [props.defValue]);\n\n  const validateData = async value => {\n    if (props.validation.required) {\n      if (value != null && value != 'empty' && value.length != undefined && value.length > 0) {\n        setValidation(null);\n      } else {\n        setValidation('This field is required');\n      }\n    }\n\n    if (props.validation.limit != null) {\n      if (value.length > props.validation.limit) {\n        setValidation(`Select not more than ${props.validation.limit} option`);\n      } else {\n        setValidation(null);\n      }\n    }\n  };\n\n  const handleChange = async e => {\n    if (e.length === undefined) {\n      setFormData(e.value);\n      await validateData(e.value);\n    } else {\n      let optiondata = [];\n      e.map(data => {\n        optiondata.push(data.value);\n      });\n      setFormData(optiondata);\n      await validateData(optiondata);\n    }\n  };\n\n  useEffect(() => {\n    if (validation !== '') {\n      let rowReturnData = {\n        key: props.name,\n        error: validation,\n        data: formData\n      };\n      props.getValue(rowReturnData);\n    }\n  }, [validation, formData]);\n  useEffect(() => {\n    if (props.submitValidate) {\n      validateData(formData);\n    } // setsubmitValidate(props.submitValidate)\n\n  }, [props.submitValidate]); // useEffect(() => {\n  //     if (submitValidate) {\n  //         validateData(formData)\n  //     }\n  // }, [submitValidate])\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [defaultOption ? /*#__PURE__*/_jsx(_Fragment, {\n      children: /*#__PURE__*/_jsx(Select, {\n        instanceId: props.id,\n        isDisabled: isDefault,\n        onChange: handleChange,\n        isMulti: props.isMulti,\n        options: props.options,\n        defaultValue: defaultOption\n      })\n    }) : /*#__PURE__*/_jsx(Select, {\n      instanceId: props.id,\n      isDisabled: isDefault,\n      onChange: handleChange,\n      isMulti: props.isMulti,\n      options: props.options\n    }), validation ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"validation-error-custome\",\n      children: validation\n    }) : '']\n  });\n}","map":null,"metadata":{},"sourceType":"module"}