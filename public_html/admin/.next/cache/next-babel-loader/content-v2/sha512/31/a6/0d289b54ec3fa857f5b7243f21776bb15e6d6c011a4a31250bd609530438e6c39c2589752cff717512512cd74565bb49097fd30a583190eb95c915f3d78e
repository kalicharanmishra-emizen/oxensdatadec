{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/var/www/domains/oxens.ezxdemo.com/public_html/admin/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/domains/oxens.ezxdemo.com/public_html/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/var/www/domains/oxens.ezxdemo.com/public_html/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport validator from 'validator'; // reactstrap components\n\nimport { Button, Card, CardHeader, CardBody, FormGroup, Form, Input, Container, Row, Col, FormFeedback } from \"reactstrap\"; // layout for this page\n\nimport Admin from \"layouts/Admin.js\"; // core components\n\nimport UserHeader from \"components/Headers/UserHeader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updatePassword, updateProfile } from \"reducers/authSlice\";\nimport { unSetApiFail, unSetApiSucc } from \"reducers/mainSlice\";\nimport { toast } from \"react-toastify\";\nimport nProgress from \"nprogress\";\n\nfunction Profile() {\n  var userDetails = useSelector(function (state) {\n    return state.authSlice.loggedInUser;\n  });\n  var apiError = useSelector(function (state) {\n    return state.mainSlice.failed;\n  });\n  var apiSuccess = useSelector(function (state) {\n    return state.mainSlice.success;\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState(userDetails.data.name),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(userDetails.data.email),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(userDetails.data.phone_no),\n      phone_no = _useState3[0],\n      setPhoneNo = _useState3[1];\n\n  var _useState4 = useState(userDetails.data.pro_image),\n      pro_image = _useState4[0],\n      setProImage = _useState4[1];\n\n  var _useState5 = useState(null),\n      pro_img = _useState5[0],\n      setProfileImage = _useState5[1];\n\n  var _useState6 = useState(''),\n      oldPassword = _useState6[0],\n      setOldPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      newPassword = _useState7[0],\n      setNewPassword = _useState7[1];\n\n  var _useState8 = useState(''),\n      conPassword = _useState8[0],\n      setConPassword = _useState8[1];\n\n  var _useState9 = useState(false),\n      alertStaus = _useState9[0],\n      setalertStatus = _useState9[1];\n\n  var _useState10 = useState(''),\n      alertMessage = _useState10[0],\n      setalertMessage = _useState10[1];\n\n  var _useState11 = useState(''),\n      alertType = _useState11[0],\n      setalertType = _useState11[1];\n\n  var _useState12 = useState(false),\n      profileSubmit = _useState12[0],\n      setProfileSubmit = _useState12[1];\n\n  var _useState13 = useState(false),\n      passwordSubmit = _useState13[0],\n      setPasswordSubmit = _useState13[1];\n\n  var _useState14 = useState({\n    email: '',\n    name: '',\n    phone_no: ''\n  }),\n      validation = _useState14[0],\n      setValidation = _useState14[1];\n\n  var _useState15 = useState({\n    old_pass: '',\n    new_pass: '',\n    con_pass: ''\n  }),\n      passValidation = _useState15[0],\n      setPassValidation = _useState15[1];\n\n  useEffect(function () {\n    setEmail(userDetails.data.email);\n    setName(userDetails.data.name);\n    setPhoneNo(userDetails.data.phone_no);\n    setProImage(userDetails.data.pro_image);\n  }, [userDetails]);\n  useEffect(function () {\n    if (apiSuccess) {\n      if (apiSuccess.statusCode >= 200 && apiSuccess.statusCode < 300) {\n        setalertStatus(true);\n        setalertMessage(apiSuccess.message);\n        setalertType('success'); // setLoader(false)\n\n        nProgress.done();\n        setTimeout(function () {\n          setalertStatus(false);\n          setalertMessage('');\n          setalertType('');\n          dispatch(unSetApiSucc());\n        }, 3000);\n      }\n    }\n  }, [apiSuccess]);\n  useEffect(function () {\n    if (apiError) {\n      if (apiError.statusCode >= 400 && apiError.statusCode <= 500) {\n        setalertStatus(true);\n        setalertMessage(apiError.message);\n        setalertType('error'); // setLoader(false)\n\n        nProgress.done();\n        setTimeout(function () {\n          setalertStatus(false);\n          setalertMessage('');\n          setalertType('');\n          dispatch(unSetApiFail());\n        }, 3000);\n      }\n    }\n  }, [apiError]);\n  useEffect(function () {\n    if (validation.email == null && validation.name == null && validation.phone_no == null) {\n      setProfileSubmit(true);\n    } else {\n      setProfileSubmit(false);\n    }\n  }, [validation]);\n  useEffect(function () {\n    if (passValidation.old_pass == null && passValidation.new_pass == null && passValidation.con_pass == null) {\n      setPasswordSubmit(true);\n    } else {\n      setPasswordSubmit(false);\n    }\n  }, [passValidation]);\n\n  var handleChange = function handleChange(e) {\n    switch (e.target.name) {\n      case 'email':\n        if (validator.isEmpty(e.target.value)) {\n          validation.email = {\n            error: \"Email is required\"\n          };\n          setValidation(_objectSpread({}, validation));\n        } else {\n          validation.email = null;\n          setValidation(_objectSpread({}, validation));\n\n          if (!validator.isEmail(e.target.value)) {\n            validation.email = {\n              error: \"Email must be a valid email address\"\n            };\n            setValidation(_objectSpread({}, validation));\n          } else {\n            validation.email = null;\n            setValidation(_objectSpread({}, validation));\n          }\n        }\n\n        setEmail(e.target.value);\n        break;\n\n      case 'name':\n        if (validator.isEmpty(e.target.value)) {\n          validation.name = {\n            error: \"Name is required\"\n          };\n          setValidation(_objectSpread({}, validation));\n        } else {\n          validation.name = null;\n          setValidation(_objectSpread({}, validation));\n        }\n\n        setName(e.target.value);\n        break;\n\n      case 'phone_no':\n        if (validator.isEmpty(e.target.value)) {\n          validation.phone_no = {\n            error: \"Phone no is required\"\n          };\n          setValidation(_objectSpread({}, validation));\n        } else {\n          validation.phone_no = null;\n          setValidation(_objectSpread({}, validation));\n\n          if (!validator.isMobilePhone(e.target.value, ['en-GB', 'en-IN'])) {\n            validation.phone_no = {\n              error: 'Phone number must be in a valid number'\n            };\n            setValidation(_objectSpread({}, validation));\n          } else {\n            validation.phone_no = null;\n            setValidation(_objectSpread({}, validation));\n          }\n        }\n\n        setPhoneNo(e.target.value);\n        break;\n\n      case 'pro_image':\n        setProfileImage(e.target.files[0]);\n        setProImage(URL.createObjectURL(e.target.files[0]));\n        break;\n\n      case 'old_pass':\n        if (validator.isEmpty(e.target.value)) {\n          passValidation.old_pass = {\n            error: 'Old Password is required'\n          };\n          setPassValidation(_objectSpread({}, passValidation));\n        } else {\n          passValidation.old_pass = null;\n          setPassValidation(_objectSpread({}, passValidation));\n        }\n\n        setOldPassword(e.target.value);\n        break;\n\n      case 'new_pass':\n        if (validator.isEmpty(e.target.value)) {\n          passValidation.new_pass = {\n            error: 'New Password is required'\n          };\n          setPassValidation(_objectSpread({}, passValidation));\n        } else {\n          passValidation.new_pass = null;\n          setPassValidation(_objectSpread({}, passValidation));\n        }\n\n        setNewPassword(e.target.value);\n        break;\n\n      case 'con_pass':\n        if (validator.isEmpty(e.target.value)) {\n          passValidation.con_pass = {\n            error: 'Confirm Password is required'\n          };\n          setPassValidation(_objectSpread({}, passValidation));\n        } else {\n          passValidation.con_pass = null;\n          setPassValidation(_objectSpread({}, passValidation));\n\n          if (e.target.value != newPassword) {\n            passValidation.con_pass = {\n              error: 'Confirm Password and new password must be same'\n            };\n            setPassValidation(_objectSpread({}, passValidation));\n          } else {\n            passValidation.con_pass = null;\n            setPassValidation(_objectSpread({}, passValidation));\n          }\n        }\n\n        setConPassword(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var validateProfile = function validateProfile() {\n    if (validator.isEmpty(email)) {\n      validation.email = {\n        error: \"Email is required\"\n      };\n      setValidation(_objectSpread({}, validation));\n    } else {\n      validation.email = null;\n      setValidation(_objectSpread({}, validation));\n\n      if (!validator.isEmail(email)) {\n        validation.email = {\n          error: \"Email must be a valid email address\"\n        };\n        setValidation(_objectSpread({}, validation));\n      } else {\n        validation.email = null;\n        setValidation(_objectSpread({}, validation));\n      }\n    }\n\n    if (validator.isEmpty(name)) {\n      validation.name = {\n        error: \"Name is required\"\n      };\n      setValidation(_objectSpread({}, validation));\n    } else {\n      validation.name = null;\n      setValidation(_objectSpread({}, validation));\n    }\n\n    if (validator.isEmpty(phone_no)) {\n      validation.phone_no = {\n        error: \"Phone no is required\"\n      };\n      setValidation(_objectSpread({}, validation));\n    } else {\n      validation.phone_no = null;\n      setValidation(_objectSpread({}, validation));\n\n      if (!validator.isMobilePhone(phone_no, ['en-GB', 'en-IN'])) {\n        validation.phone_no = {\n          error: 'Phone number must be in a valid number'\n        };\n        setValidation(_objectSpread({}, validation));\n      } else {\n        validation.phone_no = null;\n        setValidation(_objectSpread({}, validation));\n      }\n    }\n  };\n\n  var profileUpdate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var formData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return validateProfile();\n\n            case 3:\n              // console.log('profile submit',profileSubmit);\n              if (profileSubmit) {\n                formData = new FormData();\n                formData.append(\"email\", email);\n                formData.append(\"name\", name);\n                formData.append(\"phone_no\", phone_no);\n                formData.append(\"pro_image\", pro_img);\n                document.getElementById('profile-image').value = '';\n                nProgress.start(); // setLoader(true)\n\n                dispatch(updateProfile(formData));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function profileUpdate(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var validatePassword = function validatePassword() {\n    if (validator.isEmpty(oldPassword)) {\n      passValidation.old_pass = {\n        error: 'Old Password is required'\n      };\n      setPassValidation(_objectSpread({}, passValidation));\n    } else {\n      passValidation.old_pass = null;\n      setPassValidation(_objectSpread({}, passValidation));\n    }\n\n    if (validator.isEmpty(newPassword)) {\n      passValidation.new_pass = {\n        error: 'New Password is required'\n      };\n      setPassValidation(_objectSpread({}, passValidation));\n    } else {\n      passValidation.new_pass = null;\n      setPassValidation(_objectSpread({}, passValidation));\n    }\n\n    if (validator.isEmpty(conPassword)) {\n      passValidation.con_pass = {\n        error: 'Confirm Password is required'\n      };\n      setPassValidation(_objectSpread({}, passValidation));\n    } else {\n      passValidation.con_pass = null;\n      setPassValidation(_objectSpread({}, passValidation));\n\n      if (conPassword != newPassword) {\n        passValidation.con_pass = {\n          error: 'Confirm Password and new password must be same'\n        };\n        setPassValidation(_objectSpread({}, passValidation));\n      } else {\n        passValidation.con_pass = null;\n        setPassValidation(_objectSpread({}, passValidation));\n      }\n    }\n  };\n\n  var passwordUpdate = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n              _context2.next = 3;\n              return validatePassword();\n\n            case 3:\n              if (passwordSubmit) {\n                payload = {\n                  old_pass: oldPassword,\n                  new_pass: newPassword,\n                  con_pass: conPassword\n                }; // setLoader(true)\n\n                nProgress.start();\n                dispatch(updatePassword(payload));\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function passwordUpdate(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  if (alertStaus) {\n    toast(alertMessage, {\n      type: alertType\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(UserHeader, {}), /*#__PURE__*/_jsx(Container, {\n      className: \"mt--7\",\n      fluid: true,\n      children: /*#__PURE__*/_jsxs(Row, {\n        children: [/*#__PURE__*/_jsx(Col, {\n          className: \"order-xl-1\",\n          xl: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"bg-secondary shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-white border-0\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(Col, {\n                  xs: \"8\",\n                  children: /*#__PURE__*/_jsx(\"h3\", {\n                    className: \"mb-0\",\n                    children: \"My Account\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsxs(Form, {\n                onSubmit: profileUpdate,\n                children: [/*#__PURE__*/_jsx(\"h6\", {\n                  className: \"heading-small text-muted mb-4\",\n                  children: \"User information\"\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: \"pl-lg-4\",\n                  children: /*#__PURE__*/_jsxs(Row, {\n                    children: [/*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          htmlFor: \"input-email\",\n                          children: \"Email address\"\n                        }), /*#__PURE__*/_jsx(Input, {\n                          className: \"form-control-alternative\",\n                          id: \"input-email\",\n                          placeholder: \"demo@example.com\",\n                          type: \"email\",\n                          name: \"email\",\n                          value: email,\n                          onChange: handleChange,\n                          invalid: validation.email ? true : false\n                        }), /*#__PURE__*/_jsx(FormFeedback, {\n                          children: validation.email && validation.email.error\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          htmlFor: \"input-name\",\n                          children: \"Name\"\n                        }), /*#__PURE__*/_jsx(Input, {\n                          className: \"form-control-alternative\",\n                          id: \"input-name\",\n                          placeholder: \"Enter Name\",\n                          type: \"text\",\n                          name: \"name\",\n                          value: name,\n                          onChange: handleChange,\n                          invalid: validation.name ? true : false\n                        }), /*#__PURE__*/_jsx(FormFeedback, {\n                          children: validation.name && validation.name.error\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          htmlFor: \"input-phone-no\",\n                          children: \"Phone No\"\n                        }), /*#__PURE__*/_jsx(Input, {\n                          className: \"form-control-alternative\",\n                          id: \"input-phone-no\",\n                          placeholder: \"Enter Phone No\",\n                          type: \"text\",\n                          name: \"phone_no\",\n                          value: phone_no,\n                          onChange: handleChange,\n                          invalid: validation.phone_no ? true : false\n                        }), /*#__PURE__*/_jsx(FormFeedback, {\n                          children: validation.phone_no && validation.phone_no.error\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"4\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          htmlFor: \"profile-image\",\n                          children: \"Profile Image\"\n                        }), /*#__PURE__*/_jsx(Input, {\n                          className: \"form-control-alternative\",\n                          id: \"profile-image\",\n                          type: \"file\",\n                          name: \"pro_image\",\n                          onChange: handleChange,\n                          invalid: validation.pro_image ? true : false\n                        }), /*#__PURE__*/_jsx(FormFeedback, {\n                          children: validation.pro_image && validation.pro_image.error\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"2\",\n                      children: /*#__PURE__*/_jsx(\"img\", {\n                        src: pro_image,\n                        className: \"m-2\",\n                        width: \"50\",\n                        height: \"50\"\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"12\",\n                      children: /*#__PURE__*/_jsx(Button, {\n                        className: \"float-right\",\n                        color: \"primary\",\n                        type: \"submit\",\n                        children: \"Update\"\n                      })\n                    })]\n                  })\n                })]\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Col, {\n          className: \"order-xl-1\",\n          xl: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"bg-secondary shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-white border-0\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(Col, {\n                  xs: \"8\",\n                  children: /*#__PURE__*/_jsx(\"h3\", {\n                    className: \"mb-0\",\n                    children: \"My Account Passwords\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsx(Form, {\n                onSubmit: passwordUpdate,\n                children: /*#__PURE__*/_jsx(\"div\", {\n                  className: \"pl-lg-4\",\n                  children: /*#__PURE__*/_jsxs(Row, {\n                    children: [/*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          htmlFor: \"input-email\",\n                          children: \"Old Password\"\n                        }), /*#__PURE__*/_jsx(Input, {\n                          className: \"form-control-alternative\",\n                          id: \"input-email\",\n                          placeholder: \"Old Password\",\n                          type: \"password\",\n                          name: \"old_pass\",\n                          value: oldPassword,\n                          onChange: handleChange,\n                          invalid: passValidation.old_pass ? true : false\n                        }), /*#__PURE__*/_jsx(FormFeedback, {\n                          children: passValidation.old_pass && passValidation.old_pass.error\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          htmlFor: \"input-name\",\n                          children: \"New Password\"\n                        }), /*#__PURE__*/_jsx(Input, {\n                          className: \"form-control-alternative\",\n                          id: \"input-name\",\n                          placeholder: \"New Password\",\n                          type: \"password\",\n                          name: \"new_pass\",\n                          value: newPassword,\n                          onChange: handleChange,\n                          invalid: passValidation.new_pass ? true : false\n                        }), /*#__PURE__*/_jsx(FormFeedback, {\n                          children: passValidation.new_pass && passValidation.new_pass.error\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"6\",\n                      children: /*#__PURE__*/_jsxs(FormGroup, {\n                        children: [/*#__PURE__*/_jsx(\"label\", {\n                          className: \"form-control-label\",\n                          htmlFor: \"\",\n                          children: \"Confirm Password\"\n                        }), /*#__PURE__*/_jsx(Input, {\n                          className: \"form-control-alternative\",\n                          id: \"input-phone-no\",\n                          placeholder: \"Confirm Password\",\n                          type: \"password\",\n                          name: \"con_pass\",\n                          value: conPassword,\n                          onChange: handleChange,\n                          invalid: passValidation.con_pass ? true : false\n                        }), /*#__PURE__*/_jsx(FormFeedback, {\n                          children: passValidation.con_pass && passValidation.con_pass.error\n                        })]\n                      })\n                    }), /*#__PURE__*/_jsx(Col, {\n                      lg: \"12\",\n                      children: /*#__PURE__*/_jsx(Button, {\n                        className: \"float-right\",\n                        color: \"primary\",\n                        type: \"submit\",\n                        children: \"Update Password\"\n                      })\n                    })]\n                  })\n                })\n              })\n            })]\n          })\n        })]\n      })\n    })]\n  });\n}\n\nProfile.layout = Admin;\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}