{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/domains/oxens.ezxdemo.com/public_html/admin/components/Map/AutoPicker.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"lodash\";\n\nvar AutoPicker = function AutoPicker(props) {\n  _s();\n\n  var autoComplete = null;\n  var google = null;\n\n  var _useState = useState(''),\n      location = _useState[0],\n      setLocation = _useState[1];\n\n  var _useState2 = useState({\n    loading: true,\n    data: []\n  }),\n      predection = _useState2[0],\n      setPredection = _useState2[1];\n\n  useEffect(function () {\n    setLocation(props.location.address);\n  }, [props.location]);\n  var debounceLoad = useCallback(debounce(function (location) {\n    if (location != '') {\n      autoComplete.getQueryPredictions({\n        input: location\n      }, displaySuggestions);\n    }\n  }, 1000), []);\n  useEffect(function () {\n    google = window.google;\n    autoComplete = new google.maps.places.AutocompleteService();\n  }, []);\n\n  var displaySuggestions = function displaySuggestions(predictions, status) {\n    var tempArray = [];\n\n    if (predictions && predictions.length > 0) {\n      predictions.forEach(function (list) {\n        return tempArray.push({\n          place_id: list.place_id,\n          title: list.structured_formatting.main_text,\n          description: list.structured_formatting.secondary_text\n        });\n      });\n    }\n\n    setPredection({\n      loading: false,\n      data: tempArray\n    });\n  };\n\n  var hangelLocationSelect = function hangelLocationSelect(e) {\n    var place_id = e.currentTarget.getAttribute('value');\n    google = window.google;\n    var geoCode = new google.maps.Geocoder();\n    geoCode.geocode({\n      placeId: place_id\n    }).then(function (_ref) {\n      var results = _ref.results;\n\n      if (results[0]) {\n        props.getLocation(results[0]);\n        setPredection({\n          loading: true,\n          data: []\n        });\n      } else {\n        console.log(\"No results found\");\n      }\n    })[\"catch\"](function (e) {\n      return console.log(\"Geocoder failed due to: \" + e);\n    });\n  };\n\n  var closeModel = function closeModel() {\n    props.toggleMap();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group map-form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Search Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"button\",\n        onClick: closeModel,\n        className: \"close-icon\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"ni ni-pin-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \" form-control\" // ref={autoCupRef}\n        ,\n        onChange: function onChange(e) {\n          setLocation(e.target.value);\n          debounceLoad(e.target.value);\n        },\n        value: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"locationSuggestion \".concat(predection.loading ? \"d-none\" : \"d-block\"),\n        children: predection.data.length == 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"predectionList\",\n          children: \"No data found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, _this) : predection.data.map(function (list) {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"predectionList\",\n            onClick: hangelLocationSelect,\n            value: list.place_id,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: list.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, _this), list.description]\n          }, list.place_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false);\n};\n\n_s(AutoPicker, \"XBZlVZr8OL0ntc0LikcxwHF/DxM=\");\n\n_c = AutoPicker;\nexport default AutoPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoPicker\");","map":{"version":3,"sources":["/var/www/domains/oxens.ezxdemo.com/public_html/admin/components/Map/AutoPicker.js"],"names":["useCallback","useEffect","useRef","useState","debounce","AutoPicker","props","autoComplete","google","location","setLocation","loading","data","predection","setPredection","address","debounceLoad","getQueryPredictions","input","displaySuggestions","window","maps","places","AutocompleteService","predictions","status","tempArray","length","forEach","list","push","place_id","title","structured_formatting","main_text","description","secondary_text","hangelLocationSelect","e","currentTarget","getAttribute","geoCode","Geocoder","geocode","placeId","then","results","getLocation","console","log","closeModel","toggleMap","target","value","map"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"lodash\";\nconst AutoPicker = (props) => {\n    let autoComplete = null\n    let  google = null\n    const [location,setLocation] = useState('')\n    const [predection,setPredection] = useState({\n        loading:true,\n        data:[]\n    })\n    useEffect(()=>{\n        setLocation(props.location.address)\n    },[props.location])\n    const debounceLoad = useCallback(\n        debounce(\n            (location)=>{\n                if (location!='') {                    \n                    autoComplete.getQueryPredictions({ input: location }, displaySuggestions);\n                }\n            }\n            , 1000)\n        , []\n    );\n    useEffect(() => {\n        google = window.google;\n        autoComplete = new google.maps.places.AutocompleteService();\n    }, []);\n    const displaySuggestions = (predictions, status) =>{\n        let tempArray=[]\n        if (predictions && predictions.length > 0 ) {\n            predictions.forEach(list=>tempArray.push({\n                place_id:list.place_id,\n                title:list.structured_formatting.main_text,\n                description:list.structured_formatting.secondary_text\n            }))\n        }\n        setPredection({\n            loading:false,\n            data:tempArray\n        })     \n    }\n    const hangelLocationSelect = (e)=>{\n        let place_id = e.currentTarget.getAttribute('value')\n        google = window.google;\n        const geoCode = new google.maps.Geocoder()\n        geoCode.geocode({ placeId: place_id }).then(({results}) => {\n            if (results[0]) {\n              props.getLocation(results[0])\n              setPredection({\n                loading:true,\n                data:[]\n            })\n            } else {\n                console.log(\"No results found\");\n            }\n          })\n          .catch((e) => console.log(\"Geocoder failed due to: \" + e));\n    }\n    const closeModel = () =>{\n        props.toggleMap()\n    }\n    return (\n        <>\n        {}\n            <div className=\"form-group map-form-group\">\n            <label>Search Location</label>\n            <span role=\"button\" onClick={closeModel} className=\"close-icon\">&times;</span>\n            <i className=\"ni ni-pin-3\"></i>\n            <input\n                className=\" form-control\"\n                // ref={autoCupRef}\n                onChange={(e)=>{\n                        setLocation(e.target.value)\n                        debounceLoad(e.target.value)\n                    }\n                }\n                value={location}\n            />\n            <div className={`locationSuggestion ${predection.loading?\"d-none\":\"d-block\"}`}>\n                {\n                    predection.data.length==0?\n                        <span className=\"predectionList\">No data found</span>\n                    :predection.data.map(list=>(\n                        <span className=\"predectionList\" onClick={hangelLocationSelect} key={list.place_id} value={list.place_id}> \n                            <h4>{list.title}</h4>\n                            {list.description}\n                        </span>\n                    ))\n                }\n            </div>\n            </div>\n        </>\n    );\n};\nexport default AutoPicker\n"]},"metadata":{},"sourceType":"module"}