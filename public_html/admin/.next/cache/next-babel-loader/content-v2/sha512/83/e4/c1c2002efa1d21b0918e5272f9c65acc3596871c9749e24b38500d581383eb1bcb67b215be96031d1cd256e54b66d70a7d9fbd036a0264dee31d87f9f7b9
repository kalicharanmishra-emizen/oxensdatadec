{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Admin from 'layouts/Admin';\nimport UserHeader from \"components/Headers/UserHeader\";\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, Form, FormGroup, Row, Table } from \"reactstrap\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMainSetting, updateMainSetting } from '../../reducers/settingSlice';\nimport { unSetApiFail, unSetApiSucc } from \"reducers/mainSlice\";\nimport InputCom from \"components/Form/InputCom\";\nimport NProgress from 'nprogress';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from \"react-toastify\";\n\nfunction Index() {\n  var dispatch = useDispatch();\n  var setting = useSelector(function (state) {\n    return state.settingSlice.main;\n  });\n  var apiError = useSelector(function (state) {\n    return state.mainSlice.failed;\n  });\n  var apiSuccess = useSelector(function (state) {\n    return state.mainSlice.success;\n  });\n\n  var _useState = useState({\n    status: false,\n    message: '',\n    type: ''\n  }),\n      alert = _useState[0],\n      setAlert = _useState[1];\n\n  useEffect(function () {\n    dispatch(getMainSetting());\n  }, []);\n  var validationSchema = Yup.object().shape({\n    driverWaitTime: Yup.number().typeError('Time must be a number').required('Driver pickup time is required').min(1, 'Time must be greater than 1').integer('Time must be a integer'),\n    deliveryDis: Yup.number().typeError('distance be a number').required('Delivery distance is required').min(1, 'distance must be greater than 1').integer('distance must be a integer'),\n    serviceFee: Yup.number().typeError('Service fee must be a number').required('Service fee is required').min(1, 'Service fee must be greater than 1').max(100, 'Service fee must be less than 100').integer('Time must be a integer'),\n    maxServiceFee: Yup.number().typeError('Max service fee must be a number').required('Max service fee is required').min(1, 'Max service fee must be greater than 1').integer('Max service fee must be a integer'),\n    deliveryDistance: Yup.number().typeError('Delivery distance must be a number').required('Delivery distance is required').min(1, 'Delivery distance must be greater than 1'),\n    minDeliveryCharge: Yup.number().typeError('Min delivery charge must be a number').required('Min delivery charge is required').positive('Must be a positive number'),\n    deliveryExtraFee: Yup.number().typeError('Delivery extra fee must be a number').required('Delivery extra fee is required').positive('Must be a positive number'),\n    fixLimitDeliveryDistance: Yup.number().typeError('Min delivery distance must be a number').required('Min delivery distance is required').positive('Must be a positive number'),\n    deliveryExtraFeeUnit: Yup.number().typeError('Delivery extra fee unit must be a number').required('Delivery extra fee unit is required').positive('Must be a positive number'),\n    vatCharge: Yup.number().typeError('Vat charge must be a number').required('Vat charge is required').min(1, 'Vat charge must be greater than 1').integer('Vat charge must be a integer'),\n    fixDriverDistance: Yup.number().typeError('Fixed driver distance must be a number').required('Fixed driver distance is required').positive('Must be a positive number'),\n    minDriverPayFirst: Yup.number().typeError('Delivery pay must be a number').required('Delivery pay is required').positive('Must be a positive number'),\n    extraDriverPaySecond: Yup.number().typeError('Second delivery pay must be a number').required('Second delivery pay is required').positive('Must be a positive number'),\n    deliveryExtraPayUnit: Yup.number().typeError('Delivery extra pay unit must be a number').required('Delivery extra pay unit is required').positive('Must be a positive number'),\n    deliveryExtraPay: Yup.number().typeError('Delivery extra pay must be a number').required('Delivery extra pay is required').positive('Must be a positive number'),\n    taxPay: Yup.number().typeError('Tax must be a number').required('Tax is required').min(1, 'Tax must be greater than 1').max(100, 'Tax must be less than 100').positive('Must be a positive number')\n  });\n\n  var formSubmitHandal = function formSubmitHandal(formData) {\n    // console.log('final data',formData);\n    NProgress.start();\n    dispatch(updateMainSetting(formData));\n  };\n\n  useEffect(function () {\n    if (apiSuccess) {\n      if (apiSuccess.statusCode >= 200 && apiSuccess.statusCode < 300) {\n        setAlert({\n          status: true,\n          message: apiSuccess.message,\n          type: 'success'\n        });\n        NProgress.done();\n        dispatch(unSetApiSucc());\n        setTimeout(function () {\n          setAlert({\n            status: false,\n            message: '',\n            type: ''\n          }); //   dispatch(unSetApiSucc())\n        }, 3000);\n      }\n\n      if (apiError) {\n        if (apiError.statusCode >= 400 && apiError.statusCode <= 500) {\n          setAlert({\n            status: true,\n            message: apiError.message,\n            type: 'error'\n          });\n          dispatch(unSetApiFail());\n          NProgress.done();\n          setTimeout(function () {\n            setAlert({\n              status: false,\n              message: '',\n              type: ''\n            });\n          }, 3000);\n        }\n      }\n    }\n  }, [apiSuccess, apiError]);\n\n  if (alert.status) {\n    toast(alert.message, {\n      type: alert.type\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(UserHeader, {}), /*#__PURE__*/_jsx(Container, {\n      className: \"mt--7\",\n      fluid: true,\n      children: /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsx(Col, {\n          className: \"order-xl-1\",\n          xl: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"bg-secondary shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-white border-0\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(Col, {\n                  xs: \"12\",\n                  children: /*#__PURE__*/_jsx(\"h3\", {\n                    className: \"mb-0\",\n                    children: \"Main Setting\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsx(Formik, {\n                enableReinitialize: true,\n                initialValues: setting,\n                validationSchema: validationSchema,\n                validateOnChange: false,\n                validateOnBlur: false,\n                onSubmit: function onSubmit(values) {\n                  return formSubmitHandal(values);\n                },\n                children: function children(formikProps) {\n                  return /*#__PURE__*/_jsx(Form, {\n                    onSubmit: formikProps.handleSubmit,\n                    children: /*#__PURE__*/_jsxs(\"div\", {\n                      className: \"pl-lg-4\",\n                      children: [/*#__PURE__*/_jsxs(Row, {\n                        className: \"align-items-center\",\n                        children: [/*#__PURE__*/_jsx(Col, {\n                          lg: \"6\",\n                          children: /*#__PURE__*/_jsxs(FormGroup, {\n                            children: [/*#__PURE__*/_jsx(\"label\", {\n                              className: \"form-control-label\",\n                              children: \"Driver Pickup Time (Min)\"\n                            }), /*#__PURE__*/_jsx(InputCom, {\n                              type: \"text\",\n                              name: \"driverWaitTime\",\n                              placeholder: \"Driver Pickup Time\",\n                              getValue: formikProps.setFieldValue,\n                              defValue: formikProps.values.driverWaitTime,\n                              error: formikProps.errors.driverWaitTime\n                            })]\n                          })\n                        }), /*#__PURE__*/_jsx(Col, {\n                          lg: \"6\",\n                          children: /*#__PURE__*/_jsxs(FormGroup, {\n                            children: [/*#__PURE__*/_jsx(\"label\", {\n                              className: \"form-control-label\",\n                              children: \"Delivery distance \"\n                            }), /*#__PURE__*/_jsx(InputCom, {\n                              type: \"text\",\n                              name: \"deliveryDis\",\n                              placeholder: \"Driver Pickup Time\",\n                              getValue: formikProps.setFieldValue,\n                              defValue: formikProps.values.deliveryDis,\n                              error: formikProps.errors.deliveryDis\n                            })]\n                          })\n                        }), /*#__PURE__*/_jsx(Col, {\n                          lg: \"4\",\n                          children: /*#__PURE__*/_jsxs(FormGroup, {\n                            children: [/*#__PURE__*/_jsx(\"label\", {\n                              className: \"form-control-label\",\n                              children: \" Service Fee (%)\"\n                            }), /*#__PURE__*/_jsx(InputCom, {\n                              type: \"text\",\n                              name: \"serviceFee\",\n                              placeholder: \"Service Fee\",\n                              getValue: formikProps.setFieldValue,\n                              defValue: formikProps.values.serviceFee,\n                              error: formikProps.errors.serviceFee\n                            })]\n                          })\n                        }), /*#__PURE__*/_jsx(Col, {\n                          lg: \"4\",\n                          children: /*#__PURE__*/_jsxs(FormGroup, {\n                            children: [/*#__PURE__*/_jsx(\"label\", {\n                              className: \"form-control-label\",\n                              children: \"Max Service Fee (\\xA3)\"\n                            }), /*#__PURE__*/_jsx(InputCom, {\n                              type: \"text\",\n                              name: \"maxServiceFee\",\n                              placeholder: \"Max Service Fee\",\n                              getValue: formikProps.setFieldValue,\n                              defValue: formikProps.values.maxServiceFee,\n                              error: formikProps.errors.maxServiceFee\n                            })]\n                          })\n                        }), /*#__PURE__*/_jsx(Col, {\n                          lg: \"4\",\n                          children: /*#__PURE__*/_jsxs(FormGroup, {\n                            children: [/*#__PURE__*/_jsx(\"label\", {\n                              className: \"form-control-label\",\n                              children: \"TAX in % (\\xA3)\"\n                            }), /*#__PURE__*/_jsx(InputCom, {\n                              type: \"text\",\n                              name: \"taxPay\",\n                              placeholder: \"Tax in %\",\n                              getValue: formikProps.setFieldValue,\n                              defValue: formikProps.values.taxPay,\n                              error: formikProps.errors.taxPay\n                            })]\n                          })\n                        }), /*#__PURE__*/_jsx(Col, {\n                          lg: \"12\",\n                          children: /*#__PURE__*/_jsxs(FormGroup, {\n                            children: [/*#__PURE__*/_jsx(\"label\", {\n                              className: \"form-control-label\",\n                              children: \"Vat Charge (%)\"\n                            }), /*#__PURE__*/_jsx(InputCom, {\n                              type: \"text\",\n                              name: \"vatCharge\",\n                              placeholder: \"Vat Charge\",\n                              getValue: formikProps.setFieldValue,\n                              defValue: formikProps.values.vatCharge,\n                              error: formikProps.errors.vatCharge\n                            })]\n                          })\n                        }), /*#__PURE__*/_jsxs(Col, {\n                          lg: \"12\",\n                          children: [/*#__PURE__*/_jsxs(\"h4\", {\n                            children: [\"Delivery Fee Settings User\", /*#__PURE__*/_jsx(\"hr\", {})]\n                          }), /*#__PURE__*/_jsxs(Row, {\n                            children: [/*#__PURE__*/_jsx(Col, {\n                              lg: \"6\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Fix limit delivery distance (Miles) \"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"fixLimitDeliveryDistance\",\n                                  placeholder: \"Fix limit delivery distance\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.fixLimitDeliveryDistance,\n                                  error: formikProps.errors.fixLimitDeliveryDistance\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"6\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Max Delivery Distance (Miles) \"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"deliveryDistance\",\n                                  placeholder: \"Delivery Distance\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.deliveryDistance,\n                                  error: formikProps.errors.deliveryDistance\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"4\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Min Delivery Fee (\\xA3)\"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"minDeliveryCharge\",\n                                  placeholder: \"Min Delivery Fee\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.minDeliveryCharge,\n                                  error: formikProps.errors.minDeliveryCharge\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"4\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Extra Delivery Fee Unit (Miles)\"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"deliveryExtraFeeUnit\",\n                                  placeholder: \"Extra Delivery Fee Unit\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.deliveryExtraFeeUnit,\n                                  error: formikProps.errors.deliveryExtraFeeUnit\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"4\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Extra Delivery Fee (\\xA3)\"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"deliveryExtraFee\",\n                                  placeholder: \"Extra Delivery Fee\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.deliveryExtraFee,\n                                  error: formikProps.errors.deliveryExtraFee\n                                })]\n                              })\n                            })]\n                          })]\n                        }), /*#__PURE__*/_jsxs(Col, {\n                          lg: \"12\",\n                          children: [/*#__PURE__*/_jsxs(\"h4\", {\n                            children: [\"Driver Earning Settings\", /*#__PURE__*/_jsx(\"hr\", {})]\n                          }), /*#__PURE__*/_jsxs(Row, {\n                            children: [/*#__PURE__*/_jsx(Col, {\n                              lg: \"6\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Fix Driver Distance For First Order (Miles)\"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"fixDriverDistance\",\n                                  placeholder: \"Fix Driver Distance For First Order\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.fixDriverDistance,\n                                  error: formikProps.errors.fixDriverDistance\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"6\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \" Min driver pay for first order (\\xA3) \"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"minDriverPayFirst\",\n                                  placeholder: \"Min Driver Pay For First Order\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.minDriverPayFirst,\n                                  error: formikProps.errors.minDriverPayFirst\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"4\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Extra Pay For Every Second Order (\\xA3)\"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"extraDriverPaySecond\",\n                                  placeholder: \"Extra Pay For Every Second Order\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.extraDriverPaySecond,\n                                  error: formikProps.errors.extraDriverPaySecond\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"4\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Extra Delivery Pay Unit (Miles)\"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"deliveryExtraPayUnit\",\n                                  placeholder: \"Extra Delivery Pay Unit\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.deliveryExtraPayUnit,\n                                  error: formikProps.errors.deliveryExtraPayUnit\n                                })]\n                              })\n                            }), /*#__PURE__*/_jsx(Col, {\n                              lg: \"4\",\n                              children: /*#__PURE__*/_jsxs(FormGroup, {\n                                children: [/*#__PURE__*/_jsx(\"label\", {\n                                  className: \"form-control-label\",\n                                  children: \"Extra Delivery Pay (\\xA3)\"\n                                }), /*#__PURE__*/_jsx(InputCom, {\n                                  type: \"text\",\n                                  name: \"deliveryExtraPay\",\n                                  placeholder: \"Extra Delivery Pay\",\n                                  getValue: formikProps.setFieldValue,\n                                  defValue: formikProps.values.deliveryExtraPay,\n                                  error: formikProps.errors.deliveryExtraPay\n                                })]\n                              })\n                            })]\n                          })]\n                        })]\n                      }), /*#__PURE__*/_jsx(Row, {\n                        children: /*#__PURE__*/_jsxs(Col, {\n                          lg: \"12\",\n                          children: [/*#__PURE__*/_jsx(Button, {\n                            className: \"float-right\",\n                            color: \"primary\",\n                            type: \"submit\",\n                            children: \"Save\"\n                          }), /*#__PURE__*/_jsx(Button, {\n                            className: \"float-right mr-2\",\n                            color: \"secondary\",\n                            type: \"button\",\n                            onClick: function onClick(e) {\n                              e.preventDefault();\n                              router.back();\n                            },\n                            children: \"Back\"\n                          })]\n                        })\n                      })]\n                    })\n                  });\n                }\n              })\n            }), /*#__PURE__*/_jsx(CardFooter, {\n              className: \"py-4\"\n            })]\n          })\n        })\n      })\n    })]\n  });\n}\n\nIndex.layout = Admin;\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}