"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseAPIClient_1 = require("./internals/BaseAPIClient");
const utils_1 = require("./internals/utils");
class ProjectsAPIClient extends BaseAPIClient_1.BaseAPIClient {
    constructor(options, authState, _oAuth1HttpClient) {
        super(options, authState, { apiBasePath: '/projects.xro/1.0/' }, _oAuth1HttpClient);
        this.projects = {
            get: (args) => __awaiter(this, void 0, void 0, function* () {
                let endpoint = 'projects';
                endpoint += utils_1.generateQueryString(args);
                return this.oauth1Client.get(endpoint);
            }),
            getSingle: (args) => __awaiter(this, void 0, void 0, function* () {
                let endpoint = 'projects';
                if (args && args.projectId) {
                    endpoint = endpoint + '/' + args.projectId;
                    delete args.projectId;
                }
                endpoint += utils_1.generateQueryString(args);
                return this.oauth1Client.get(endpoint);
            }),
            create: (args) => __awaiter(this, void 0, void 0, function* () {
                const endpoint = 'projects';
                return this.oauth1Client.post(endpoint, args);
            }),
        };
    }
}
exports.ProjectsAPIClient = ProjectsAPIClient;
//# sourceMappingURL=ProjectsAPIClient.js.map